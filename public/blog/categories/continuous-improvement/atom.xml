<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: continuous improvement | Headspring Labs]]></title>
  <link href="http://www.headspringlabs.com/blog/categories/continuous-improvement/atom.xml" rel="self"/>
  <link href="http://www.headspringlabs.com/"/>
  <updated>2013-07-27T15:45:54-05:00</updated>
  <id>http://www.headspringlabs.com/</id>
  <author>
    <name><![CDATA[Headspring Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[True Confessions, Public Shaming, and Test-Driven Development]]></title>
    <link href="http://www.headspringlabs.com/blog/true-confessions-public-shaming-and-test-driven-development/"/>
    <updated>2011-07-29T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/true-confessions-public-shaming-and-test-driven-development</id>
    <content type="html"><![CDATA[<p>Okay, I admit it. Sometimes I write unit tests second instead of first. I also bite my nails and rest my elbows on the dinner table. But when I've got a bug to fix, and I've already found the offending line, I can hardly resist the urge to just... just... <em>change</em> it. I'll follow up with unit tests afterwards, promise.</p>


<p>I admit this to you because admitting my wrongs is a step towards rehabilitation. I admit this to save you pain. Learn from my example. Test-second is so much less efficient than test-first. Consider the following workflow:</p>


<ol>
<li>Reproduce, identify, debug the issue.</li>
<li>Fix the code.</li>
<li>Compile and try it out.</li>
<li>Write a test that proves I fixed it.</li>
<li>Compile and run the test.</li>
<li>Change the code back to make sure my test really proves what it is trying to prove.</li>
<li>Compile and see the test fail.</li>
<li>Re-fix the code.</li>
<li>Compile and see the test pass.</li>
</ol>


<p>&nbsp;</p>


<p>I humble myself before you. How much time am I wasting there? It's embarrassing.</p>


<p>There's also a subtle point in step 1. What if I could use unit tests instead of the debugger to find the issue? That will be faster, too.</p>


<p>We can do better:</p>


<ol>
<li>Reproduce the issue and formulate a theory.</li>
<li>Write a test that exercises the theory.</li>
<li>Compile and see the test fail, corroborating the theory.</li>
<li>Fix the code.</li>
<li>Compile and see the test pass, validating the theory.</li>
</ol>


<p>&nbsp;</p>


<p>Perhaps you can relate. Perhaps you even bite your nails, too. I won't judge. Flog me or join me, the comments are open: Confess your bad habits (um, your <em>unit-testing</em> bad habits, please), and commit yourself to improvement. I challenge you to improve your efficiency and write your unit tests first, even—especially—for the little bug fixes.</p>

]]></content>
  </entry>
  
</feed>
