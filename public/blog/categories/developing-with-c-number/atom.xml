<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: developing with C# | Headspring Labs]]></title>
  <link href="http://www.headspringlabs.com/blog/categories/developing-with-c-number/atom.xml" rel="self"/>
  <link href="http://www.headspringlabs.com/"/>
  <updated>2013-08-23T18:05:38-05:00</updated>
  <id>http://www.headspringlabs.com/</id>
  <author>
    <name><![CDATA[Headspring Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Becoming a Headspringer: Take Advantage of Working with Smart People]]></title>
    <link href="http://www.headspringlabs.com/blog/becoming-a-headspringer-take-advantage-of-working-with-smart-people/"/>
    <updated>2012-04-10T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/becoming-a-headspringer-take-advantage-of-working-with-smart-people</id>
    <content type="html"><![CDATA[<p>As I was pondering a new topic to blog, I stumbled into one this morning. I was running some ideas by a few Headspringers, and they provided several options. I decided to go with a hybrid of their suggestions. What I originally planned to blog was a way to test Enumeration subclasses of the <a href="https://bitbucket.org/headspringlabs/tarantino/wiki/Home" target="_blank">Enumeration class from Tarantino</a>. What I ended up with was an even better way to test them. This is not an unusual happenstance at Headspring. If you talk to other Headspringers, you’re going to learn something new. It never ceases to amaze me how often I’m learning something. I like to think I’m doing some teaching, too, but I’m confident that I’m currently learning more than teaching.</p>


<p>In case it isn’t clear by the title, part of becoming a Headspringer is to learn from the great people you get to work with every day. So, if you'd like the opportunity to work with talented, passionate people, <a href="http://www.headspring.com/about-us/careers">we are hiring!</a></p>


<p>Now let’s get to the original idea of testing the Enumeration subclasses. I will walk through my original code, then what <a href="http://www.headspring.com/2012/02/get-to-know-a-developer-brandon-barry">Mr. Brandon Barry</a> showed me, and why it’s an improvement.</p>


<p>Originally, I had a test that gets all the subclasses of Enumeration, loops through them, and verifies all the values are unique. The test looked like this:<br />
[gist id=2348233 file=All_Enumerations_should_contain_unique_ids_test.cs]<br />
After talking to a few Headspringers, Brandon mentioned TestCaseSource, which turned out to be pretty perfect for this situation. Using TestCaseSource is similar to TestCase, which <a href="http://www.headspring.com/2012/03/why-i-like-testcase">Chris Missal blogged</a> about a couple weeks ago. You could use TestCase for this if you only wanted to test a few specific enumerations. Since I want to test all subclasses of Enumeration all the time, TestCaseSource was a much better fit. Now I don't have to worry about forgetting to add an Enumeration to the test.</p>


<p>Now the test looks like this:<br />
[gist id=2348235 file=Enumeration_should_contain_unique_ids_test.cs]<br />
Basically, NUnit runs a test per type in EnumerationTypes and passes that type into the now-parameterized test. The primary benefit of this method is that it tests one Enumeration at a time. It also makes the test simpler by removing the muck and letting you focus on the actual test. As an added bonus, it integrates with <a href="http://www.jetbrains.com/resharper/">Resharper</a>’s test runner, which means you can debug an individual test without having to loop through the set to get to the one you want.</p>


<p>I created three test subclasses, and TestEnum3 has duplicate values of 1. Here’s what the runner looks like:</p>


<p><a href="http://www.headspring.com/wp-content/uploads/2012/04/CropperCapture4.jpg"><img style="padding-left: 0px; padding-right: 0px; padding-top: 0px; border-width: 0px;" src="http://www.headspring.com/wp-content/uploads/2012/04/CropperCapture4_thumb.jpg" alt="CropperCapture[4]" width="560" border="0" /></a><br />
<span style="font-size: x-small; color: #666;">Click image to enlarge</span></p>


<p>You can see in the image above that my original test just fails with "TestEnum3 contains duplicate ID of 1". When using the TestCaseSource you get the test breakdown of each Enumeration, can clearly see that TestEnum3 is the one that fails, and can re-run that one individually. It also shows you what exactly is being tested, so you can verify you're testing everything you think you're testing.</p>


<p>And now it’s fixed:</p>


<p><a href="http://www.headspring.com/wp-content/uploads/2012/04/CropperCapture6.jpg"><img style="padding-left: 0px; padding-right: 0px; padding-top: 0px; border-width: 0px;" src="http://www.headspring.com/wp-content/uploads/2012/04/CropperCapture6_thumb.jpg" alt="CropperCapture[6]" width="560" border="0" /></a><br />
<span style="font-size: x-small; color: #666;">Click image to enlarge</span></p>


<p>If you would like to see more details on the Enumeration class, you can <a href="http://lostechies.com/jimmybogard/2008/08/12/enumeration-classes/">read Jimmy Bogard’s post on the subject</a>. If you would like more details about this particular test, feel free to leave a comment.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Reasons to Use Abstract Classes in C#]]></title>
    <link href="http://www.headspringlabs.com/blog/two-reasons-to-use-abstract-classes-in-c/"/>
    <updated>2011-07-29T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/two-reasons-to-use-abstract-classes-in-c</id>
    <content type="html"><![CDATA[<p>Do you find yourself writing the same methods over and over in different classes? Say your project needs both a "Dog" class and a "Cat" class -- do you end up writing a "sleep" method for both? What if, in two months, the client needs you to add a "possum" to the system? Do you end up going in and retyping "sleep" instructions yet again? When you're modeling a system with many similar parts, it takes way too much time and effort to keep duplicating code for each class. Imagine how hard it would be to maintain a large project with thousands of classes! Besides, it violates the DRY principle of good programming: Don't Repeat Yourself! There must be a better way.</p>


<p>Thankfully, C# has built-in features for sharing code between classes. One of these is called an "abstract class". Just create a new class with the keyword "abstract" (e.g. "public abstract class Mammal") and write in its body all the methods you would like your other classes to share in common. Since an abstract class is still a class, your "Cat" and "Dog" classes can inherit from it using a colon (e.g. "public Cat : Mammal"). This means that instead of writing a "sleep" method for each animal, you only need to write it in the "Mammal" class, and the other animals will be able to use it too.<br />
But if any class can have inheritance, why not just use a regular class? The answer is that abstract classes have two special features:</p>


<p>1. They cannot be instantiated (made into objects),<br />
2. They can have special methods called "abstract methods".</p>


<p>"Wait a minute," you may be thinking, "Why would I want a class that can't become an object?!" Sounds useless, right? However, consider the purpose of an abstract class: it contains common methods (and fields) that multiple child classes inherit from, but it does not attempt to follow these directions itself. In fact, a parent class is often missing vital information about the methods and fields it contains, because each child may use them a little bit differently. The "Mammal" abstract class only has what is common to all mammals -- since some mammals can't crawl and other mammals can't gallop, the "Mammal" class can't do either one. Imagine what would happen if you tried to instantiate a "generic" mammal: you'd get a featureless mass of hair, muscle and bone that probably wouldn't survive on its own! In the same way, it is undesirable (sometimes dangerous!) to leave a class open to instantiation when it is simply a placeholder for common features. Guard against this possibility by using an abstract class.</p>


<p>What if two classes have methods so different that the only common factor is their name? This is where an abstract method comes in handy. An abstract method looks just like a normal method, except it has the word "abstract" (e.g. "abstract exampleMethod(args);" ) and a semicolon ";" instead of body brackets "{}". What does it do? It basically tells each inheriting class to create its own method with that same name. For instance, since a dog and a bat both sleep, you could write a "sleep" method in the "Mammal" class. However, there are very few commonalities between a dog's sleep and a bat's sleep. So instead of trying to account for each individual animal's sleeping habits, you would make the "sleep" method abstract. Now the code won't even compile until each animal that inherits from "Mammal" has a method called "sleep", using the "override" keyword to replace the abstract one (e.g. "public override sleep(args) {}" ). Now even though all mammals sleep, each individual mammal can sleep in its own way. After this, you may be wondering, "Why even bother putting that method in the parent class? Each inheritor is going to have its own version anyway." You really do want to have that abstract class, not to prevent syntax errors, but to prevent human memory errors. You may know intellectually that all mammals sleep, but without a mechanism forcing you to write a "sleep" method for each mammal, it is all too easy to forget to do so. You may not even realize your mistake until you get a phone call from the client in the middle of the night. By refusing to compile until each abstract method is implemented in every inheriting class, the C# compiler is doing you a favor: it's helping you remember the obvious.</p>


<p>Abstract classes help you improve your code not only through what they can do, but also through what they can't. They can hold common features for many classes to inherit, without accidentally becoming objects themselves. They can also force you to write unique implementations of a common method, preventing human errors of forgetfulness. When you set up a class hierarchy, seriously consider whether you need a normal class to inherit from, or whether an abstract class will do. It may end up making the difference between a solid or buggy program.</p>


<p>Now, if only we had something to write the rest of our code for us...</p>

]]></content>
  </entry>
  
</feed>
