<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: quattro | Headspring Labs]]></title>
  <link href="http://headspringlabs.com/blog/categories/quattro/atom.xml" rel="self"/>
  <link href="http://headspringlabs.com/"/>
  <updated>2013-07-17T23:12:05-05:00</updated>
  <id>http://headspringlabs.com/</id>
  <author>
    <name><![CDATA[Headspring Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Powershell and Calling External Executables]]></title>
    <link href="http://headspringlabs.com/blog/powershell-and-calling-external-executables/"/>
    <updated>2011-08-18T00:00:00-05:00</updated>
    <id>http://headspringlabs.com/blog/powershell-and-calling-external-executables</id>
    <content type="html"><![CDATA[<p>In my last post on <a href="http://www.headspring.com/2011/08/avoiding-on-error-resume-next-when-using-powershell">error handling when using Powershell</a>, we saw how Powershell's default behavior for uncaught exceptions allows the rest of your script to continue running in a likely-invalid state, and how setting <strong>$global:ErrorActionPreference = "Stop"</strong> changes that behavior to stop as soon as an uncaught exception surfaces.</p>


<p>Unfortunately, we can <em>still</em> be surprised by Powershell's error handling behavior. There are two main categories of errors your Powershell script might encounter:</p>


<ol>
<li>Uncaught exceptions thrown by your Powershell process.</li>
<li>Failure exit codes returned by external programs that your Powershell process invoked.</li>
</ol>


<p>When we set the ErrorActionPreference to "Stop", we only change the behavior of uncaught exceptions. We have to work a little harder to cover the other category. Consider a Powershell script that calls out to an external program which returns its own failure exit code:</p>


<p><div><script src='https://gist.github.com/1150145.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>External executables are invoked using similar syntax as Powershell commands like <code>write-host</code>, so it isn't obvious that there's anything special about the call to <code>schtasks</code>. Since it is an external program, however, it can't exactly throw a .NET exception - it might not even <em>be</em> a .NET program.</p>


<p>The lingua franca of command-line failure is exit codes, rather than exceptions. An exit code of 0 means "all is well", and anything else should be treated as a failure.</p>


<p>We have two problems:</p>


<ol>
<li>calls to external programs don't feel special to the reader, even though they behave differently from normal Powershell commands</li>
<li>we're tempted to explicitly follow each external call with a corresponding test-and-throw code block, which would be ugly and distracting to the reader</li>
</ol>


<p>Fortunately, we can take advantage of Powershell's flexible syntax to address both of these concerns. It turns out that a Powershell function can accept a <em>code block</em> as an argument, effectively allowing us to add new keywords to the language. Consider the helper function 'exec':</p>


<p><div><script src='https://gist.github.com/1150147.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>When we use exec, we can pass it a { code block surrounded in braces }. This way we can make our external commands stand out as special, using just one new 'keyword', and we get the error handling we wanted to boot:</p>


<p><div><script src='https://gist.github.com/1150152.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>Eureka! We can ensure that both categories of failures will stop execution dead in its tracks.</p>


<p>To sum up, the default error handling behavior in Powershell is dramatically different from that of other .NET languages. <strong>By default, your script will happily and disasterously continue running even when throwing exceptions.</strong> This can leave the user of the script confused as to whether the process has actually succeeded or failed. By setting the global ErrorActionPreference and by wrapping external commands with the 'exec' helper function, Powershell's behavior can become what we expected in the first place.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Best Practices: Know your test's lifecycle, Part 1]]></title>
    <link href="http://headspringlabs.com/blog/unit-testing-best-practices-know-your-tests-lifecycle-part-1/"/>
    <updated>2011-08-17T00:00:00-05:00</updated>
    <id>http://headspringlabs.com/blog/unit-testing-best-practices-know-your-tests-lifecycle-part-1</id>
    <content type="html"><![CDATA[<p>A long time ago, my development team decided to write our own unit test framework. Today that would be ridiculous, because there are so many mature options from the .NET community (NUnit, MbUnit, xUnit, MsTest, to name a few). But this was 2002, .NET was brand new, and we thought attribute-based metadata was a better approach to describing tests than the interface-and-naming-convention pattern that NUnit required at the time.</p>


<p>Of course, about the same time we'd gotten our homegrown framework running and built a couple thousand tests with it, NUnit 2.0 came out with a brand-new and shiny attribute-based metadata approach. We spent the next 3 years wishing we had the time to port all our tests to NUnit, and stealing features from it for our custom test runner.</p>


<p>One of the things I really envied about NUnit was its test method lifecycle. We support setup and teardown methods, but we never went beyond that. NUnit, by comparison has a rich set of events that occur for each test that gets run. Whenever I teach our <a title="Agile Bootcamp" href="http://www.headspring.com/services/developer-training/agile-bootcamp">Agile Boot Camp class</a>, I always make sure to walk students through the finer points of a test fixture's life, so they'll know the best way to organize their test code. When you're first writing unit tests, knowing whether to put something in the test method, the setup, the fixture setup, or somewhere else, just isn't all that obvious. Oftentimes, I see people putting expensive initialization code into every single test method, which causes their tests to run slower than they need to.</p>


<p><strong>Note: </strong>I'm using NUnit for these examples. Other frameworks have different semantics, and I recommend you write some similar code for whatever library you use. For me, NUnit's always been the draft horse of .NET test frameworks - stable, steady, gets along with everybody, and does what I expect.</p>


<p>If you're not already familiar with NUnit, take a look at their <a title="NUnit Quick-start guide" href="http://www.nunit.org/index.php?p=quickStart&amp;r=2.6">quick-start guide </a>and then come back. I'll wait.</p>


<p>Now, take a look at this simple test fixture class:</p>


<p><div><script src='https://gist.github.com/1200910.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>This fixture has two test methods, one which passes and one which fails. When we run the test framework in NUnit's test runner, we get this output:</p>


<p>&nbsp;</p>


<pre>Constructor
TestFixtureSetup
SetUp
First Test passes!
TearDown
SetUp
Second Test fails!
TearDown
TestFixtureTearDown
Dispose</pre>


<p>So, what does this tell us about the lifecycle of a test within a fixture?</p>


<ol>
<li><strong>The Test Fixture class is constructed once.</strong>  NUnit invokes all the test methods on the same fixture instance.</li>
<li><strong>TestFixtureSetup and TestFixtureTeardDown run one time. </strong>TestFixtureSetup is run immediately after construction, and only runs once for the entire test run. TestFixtureTearDown is called immediately after all test methods have been run.</li>
<li><strong>TestSetup and TestTearDown run around every test</strong>. These two methods execute immediately before, and immediately after, each test method.</li>
<li><strong>TestTearDown runs even when a test fails.</strong> Noice that Even when the second test exits with a failed assertion, the TearDown method is still called for that method.</li>
<li><strong>NUnit knows about IDisposable.</strong> Did you notice that our class implemented IDisposable? IDisposable is .NET's canonical interface for when you have a resource whose scope needs to be managed. The IDisposable.Dispose method is the last method called on our fixture class.</li>
</ol>


<div>So now that we know what interesting methods are called, when, and how often, what can we conclude? Well, here's my first guideline for you:</div>


<div>
<ol>
<li><strong>Use constructors for class-wide setup. Use IDisposable for class-wide cleanup. Avoid TestFixtureSetup and TestFixtureTearDown. </strong>I've found that the fixture-level setup and teardown methods create more confusion than they're worth. In Part 2, we'll see just how complicated this can get when you have a base class for your test fixture. But even with a simple fixture class like the above, There's no reason to have two places for your class' initialization and cleanup code. That's basically a guarantee that it's going to get chopped up between the two with no rhyme or reason. Every .NET developer knows the constructor/dispose pattern. We don't need another one.</li>
</ol>
<p>Hopefully this paints a clearer picture of what happens when you actually run a set of unit tests. Next time, we're going to see what happens when we give our test fixture a base class with its own setup, teardown, and test methods, and how they interact with the ones we already have.</p>
</div>


<p><a href="http://www.headspring.com/resources/whitepapers/">Learn more about unit tests and the Agile Difference by visiting our Whitepapers page</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requirement Gathering Techniques | Drawing 101]]></title>
    <link href="http://headspringlabs.com/blog/requirement-gathering-techniques-drawing-101/"/>
    <updated>2011-07-29T00:00:00-05:00</updated>
    <id>http://headspringlabs.com/blog/requirement-gathering-techniques-drawing-101</id>
    <content type="html"><![CDATA[<p>If it can't be drawn, it can't be built. It’s the mantra in our office. Having heard it almost every day that I have been here at Headspring, I never really understood its power before I set out on the (thought to be exciting) task of rebuilding the company website.</p>


<p>I knew I’d have to gather requirements for the site. Having no idea of what requirement gathering techniques were out there I just started a word document list: pages, forms, content.  When I sat down with the team to start developing the site, they needed more information about site flow.</p>


<p>I tried explaining with my 17 page word document, highlighted and notes scribbled on the side, but no one was getting it (including myself). When one brilliant person suggested that we draw it out, markers opened and the drawing began: home page, top-nav pages, children pages, forms and so on.</p>


<p>When we were done the picture finally became clear. All my requirements, even those that I had forgotten about, were there and easy to follow. No matter what you’re building, please learn from my mistake and start off drawing your requirements, because if it can’t be drawn, it can’t be built.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Programmer to Manager]]></title>
    <link href="http://headspringlabs.com/blog/from-programmer-to-manager/"/>
    <updated>2011-07-27T00:00:00-05:00</updated>
    <id>http://headspringlabs.com/blog/from-programmer-to-manager</id>
    <content type="html"><![CDATA[<p>I started my career as a programmer. I was fortunate enough to get into computing as the Internet revolution was a strong possibility in the early nineties. My career has largely followed the rise of the PC, the Internet, and now cloud computing. Being one of the first on my block with an email address and a web site (which we called "<a href="http://en.wikipedia.org/wiki/Home_page">home pages</a>" back then), I started web development very early.</p>


<h1>In the beginning</h1>


<p>I started my professional programming career as a programmer at the local school district. Some of my software is still running today, and one of their websites for teachers and high school counselors is still online and serving their needs. It's written in ASP Classic, but it works well. My first applications used Internet Database Connector technology with ODBC data sources and HTX templates on IIS 2 running on Windows NT 4 servers. As far as I know, this was the birth of the "code nugget" in ASP.NET (&lt;% %&gt;). Microsoft <a href="http://msdn.microsoft.com/en-us/library/ms525756(v=vs.90).aspx">still supports this technology</a>.</p>


<p>As my career progressed and I <img src="http://www.headspring.com/wp-content/uploads/2011/07/072711_1557_FromProgram15.png" alt="" align="left" />became more senior as a programmer, I vowed that I would never enter management. After all, I enjoyed coding all day, and I saw some examples of bosses that didn't understand the underlying complexities involved in software.</p>


<p>After a few years as a Senior Software Developer, I became interested in not only programming the software that was the solution but also in performing the analysis work to look at a situation and decide the overarching solution.</p>


<h1>The switch</h1>


<p>Later, I became interested in business, and now I am the Chief Operating Officer at <a href="http://www.headspring.com/">Headspring, LP</a>. Headspring is a <img src="http://www.headspring.com/wp-content/uploads/2011/07/072711_1557_FromProgram25.jpg" alt="" align="right" />custom software company in Austin, TX. We help companies compete by helping them get greater value out of their existing custom software investments as well as creating new custom software assets for them. I can see on a daily basis the real operating dollars generated and saved by our software solutions we have deployed for our customers.</p>


<p>My view of the industry has changed quite a bit now that I am a manager. Because Headspring is a custom software company, I still program (everyone does), but I also do the following:</p>


<ul>
<li>Grow our people</li>
<li>Close out monthly financials</li>
<li>Perform financial and operation briefings for the company</li>
<li>Recruit new technical staff</li>
<li>Set compensations levels and promote staff</li>
<li>Manage facilities</li>
<li>Manage vendors</li>
<li>Help set company strategy</li>
</ul>


<h1>Professional development</h1>


<p>We have a learning culture here at Headspring. Everyone is given time for and expected to foster what we call Continuous Improvement. In fact, CI Time is one of the things we track on our time system. Because we are a professional services company, we bill by the hour; therefore, we track every hour.</p>


<p><img src="http://www.headspring.com/wp-content/uploads/2011/07/072711_1557_FromProgram35.gif" alt="" align="left" />In January of 2011, I began a new initiative in my own quest for continuous improvement. I started the MBA program at the <a href="http://www.jwmi.com/">Jack Welch Management Institute</a>. JWMI is a 2-year MBA program started and authored by the long-time CEO of General Electric, Jack Welch. After reading Jack's book, <em>Winning</em>, I knew that I could learn a lot from him, and I jumped at the opportunity to apply to be in his Masters of Business Administration program. I have already learned so much about business communication, leadership, strategy, and people management. As a manager, I am seeing that people management might be the most important topic covered in the program.</p>


<h1>What's next?</h1>


<p>As a manager, my success depends completely on the work of others, not myself. The only way I succeed is if others succeed. That's the big difference between hands-on work and management work. People decisions can make or break an outcome. I have learned a great deal since entering management five years ago. I also know that I have so much more to learn. I am grateful for a terrific staff. They constantly challenge me to find other great people they can work with, and I do that to the best of my ability.</p>


<p>The more I learn, the more I discover how much there is to learn.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Top 5 Reasons the BCS is like Your Legacy System]]></title>
    <link href="http://headspringlabs.com/blog/the-top-5-reasons-the-bcs-is-like-your-legacy-system/"/>
    <updated>2010-12-28T00:00:00-06:00</updated>
    <id>http://headspringlabs.com/blog/the-top-5-reasons-the-bcs-is-like-your-legacy-system</id>
    <content type="html"><![CDATA[<p>The BCS formula has determined that Auburn and Oregon will square off in the BCS National Championship Game. What does this have to do with your company's legacy system? More than you might think.</p>


<p>One: It sounded like a good idea at the time.</p>


<p>As strange as it may sound, the BCS system was created to solve a problem. The old way of crowning a national champion failed for the first time in 1992. Mark Brunell's Washington Huskies had won their bowl game and finished the season undefeated. In most seasons this would have been enough to secure the national championship, but this year was different. The University of Miami (featuring Dwayne "The Rock" Johnson) had likewise finished the regular season undefeated and pummeled Nebraska in the Orange Bowl. Although The Rock would go on to claim to be "The People's Champion," the national title was declared a tie. Everyone threw a big fit because there were two national champions, and America doesn't do ties. Something had to be done—and the solution was to be the Bowl Championship Series. The BCS ranking formula would include the opinions of people who talk about sports on TV, coaches who are allowed to vote for their own teams, and six computers that would calculate secret algorithms. What could possibly go wrong?</p>


<p>Like college football, businesses grow and change over time. Systems evolve naturally around activities and tasks that are of higher value to the bottom line. Back in the day, it was easy to tweak the system. Putting a file in a different inbox, or firing the guy with messy handwriting was how things got done. Then businesses grew and grew and grew, until they could produce no more without bringing in an IT expert to automate everything. To quote the slick talking software-salesman: "Using this great new system of expensive software that only a couple of people understand, your business will be free to expand, and the system probably won't have to ever be changed! Even if some minor adjustments have to be made, I'm sure it would be no problem to find someone who can do it right, and every employee will have no problem at all adjusting to the new features. What could possibly go wrong?"</p>


<p>Two: It usually works. But even when it does, it freaks you out right up to the end.</p>


<p>For the most part, the BCS rankings put together the two best teams in the country. It provides us with an entertaining game and a great excuse for some New Year's Day laziness. With the exceptions of 2003 (LSU/USC), and 2004 (USC/Auburn) there haven't been co-national champions since the BCS formula was implemented. Surely a system that works 85% of the time can't be bad.</p>


<p>Although it usually works, there's the potential for disaster every time. Every November, there is a possibility that 3, 4, or sometimes 5 teams would have a legitimate claim to play in the looming national title game. Fan bases get all worked up, and Lou Holtz gets so flustered he can't speak.</p>


<p>Legacy systems are the same way. If you've survived a few screw-ups before, you'll survive them again. As long as the orders go through the same way each time eventually you'll get your funding/paycheck, and there's probably not a reason to change anything. We know a lot of people who've been dealing with the uncertainty of a faulty system for years. At crunch time, they bite their nails and prepare for the worst. Then at the last second, everything usually comes together—the system that's held up with duct tape comes through yet again. But hey, they're no worse for the wear.</p>


<p>Three: The guys who designed it spend more time counting their money than fixing the problems.</p>


<p>It's almost cliché to skewer the NCAA and money-hungry college Presidents. Yes, they make loot hand-over-foot while the masses demand a playoff. But give them credit—they designed a system that usually delivers what consumers want and supplies enormous profits for their schools. After all, boosting revenue for the universities and conferences is one of the most important parts of their jobs. Without this revenue, schools would be forced to slash research budgets, cut programs, and generally lose their ability to equip young men and women with the tools needed to succeed in the world. Sure, they'll listen to important boosters and the bully pulpit that is the NCAA, but they're not going to rush to change anything unless it's worth their while.</p>


<p>As opposed to the NCAA, the software team you selected usually builds exactly what you tell them to. That might be the problem. Chances are your vendor is not going to know your business as well as you do. The development team should understand the "who, what, when, and where," and most importantly the "why." This involves some up-front commitment in time, and a little bit of back and forth between the two of you to ensure that they get it. Ideally, the vendor that you choose should be able to listen to your requirements, but also be able to make suggestions about something that might work better in the long run.</p>


<p>Four: It's the only game in town.</p>


<p>Every year people discuss boycotting the national championship game. There's always the guy at the bar who says, "I love college football, but I'm not going to watch the BCS games until they put in a playoff."</p>


<p>That guy is a liar. He is going to cave in and watch the sport he loves, played at the highest level for the last time until September. People have the option to watch the FCS Playoffs, but I doubt 50 million TVs will tune in to watch football games that are apparently being played at Roland Garros.</p>


<p>The flaws in a legacy system are similarly well known. There's generally a sense of resignation that you have to make due with what you have. You can't just stop using it; after all, business would grind to a halt. Your other option would be to update it, and most people don't even know where to begin with a project like that. You use it and learn to tolerate it, because you don't have any other recourse. Sometimes the devil you know is preferable to watching Eastern Washington vs. Delaware.<br />
Five: It's only going to be fixed when the problem becomes more costly than the solution.</p>


<p>Great news NCAA football fans! ESPN has a deal with the BCS that will guarantee the rights to air all of the BCS games through 2014. For all that's broken with the BCS, they're still being paid $125 million per year just for the rights to broadcast the games. Like it or not, the BCS is nothing if not profitable. That's not going to change until there's a run of consecutive co-champions, or a viable alternative with a smooth transition is offered. Mark Cuban, the ball is in your court.</p>


<p>People ask, "When should I do something about our legacy system?"</p>


<p>It's simple math really.</p>


<p>How many orders/grants/contracts has the system cost you? How much time do you spend worrying about, fixing, or paying others to handle issues with the current system? What is your hourly rate? Add those numbers together and you get an idea of how much the legacy system is costing you. From there it's pretty simple to figure out what your budget should be and when you will recognize a return on that investment. Maybe it makes sense to keep using the current one in spite of all its flaws. Maybe there's a place in this world for somewhat serviceable broken-down systems that used to be fast. After all, Mark Brunell still has a job.</p>


<p>If you have run the numbers and realize it is time to invest in a way out of your legacy system, Headspring would like to speak with you and we hope you will contact us. Helping enterprises out of legacy systems is what we do best. If you select another vendor, please do due diligence and choose well. You will be frustrated if the "solution" is a brand new legacy system. Example: BCS</p>

]]></content>
  </entry>
  
</feed>
