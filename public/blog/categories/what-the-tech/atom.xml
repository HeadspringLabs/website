<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: What the tech? | Headspring Labs]]></title>
  <link href="http://www.headspringlabs.com/blog/categories/what-the-tech/atom.xml" rel="self"/>
  <link href="http://www.headspringlabs.com/"/>
  <updated>2013-12-30T10:27:38-06:00</updated>
  <id>http://www.headspringlabs.com/</id>
  <author>
    <name><![CDATA[Headspring Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The confusion around QA: why doesn’t the industry agree?]]></title>
    <link href="http://www.headspringlabs.com/blog/the-confusion-around-qa-why-doesnt-the-industry-agree/"/>
    <updated>2012-03-30T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/the-confusion-around-qa-why-doesnt-the-industry-agree</id>
    <content type="html"><![CDATA[<p>Most people in the industry are undoubtedly familiar with the Software Development Lifecycle (SDLC).</p>


<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/aa/CPT-SystemLifeSycle.svg/500px-CPT-SystemLifeSycle.svg.png" alt="" /></p>


<p>Reference: Wikipedia</p>


<p>I was having lunch with a recruiter colleague, and I was learning about the QA requests from lots of customers.  Most defined the QA role well within the “Testing” oval as shown in the picture.  From my questioning, it appears that the agile movement has done little to alter this SDLC.  In fact, this process is still alive and very will, even within agile teams.  The difference is in the batch size.  Rather than doing analysis on a batch of 50 features and then moving that full batch to design, the agile movement has reduced that batch size considerably, and in some cases reduced it down to a batch size of 1.  Lean agile teams are likely to use a batch size of 1 and continuously pull features through the lifecycle.  As an aside, I find that even when working on a single feature, this cycle is still in play, although the feature is more likely to jump backward and redo a portion of the phase before if new information is found.</p>


<p>The reason for the reflection on QA is that my recruiter colleague still predominantly  receives requests for QA folks to fill the roll of the testing phase.  This means that the QA involvement happens after analysis, after design, after implementation, and only when defects can no longer be prevented.  They can only be discovered.  Inspectors at the end of an assembly line are powerless to prevent defective parts.  They can only discover them through inspection and serve a Quality Control role to prevent defective parts from being shipped.  The same is true in software, and many others have written the same.</p>


<p>I shared a very successful project where we incorporated what would otherwise be a very traditional QA Manager into an agile process and yielded great results and a very low defect rate.  When crafting the team’s process, the QA Manager worked in between the analysis and design phases of a given feature to understand and then define the test cases.  That is, based on the current understanding of the feature, how will we test it?  The work required to create the test cases was sufficient to find analysis gaps early and force them to be filled.  The additional information and context contained in the test cases added the design activity as well and yield, in my opinion, a more robust design that was less prone to defects of oversight.  In this project, we saw the time spent coding reduced to less than 50% of the overall project effort.  In fact, at the beginning of the project, programmers were about 50% of project staff, and half-way through, the programmer staff had been reduced to 1/3 of overall project staff.  By crafting a process that pulled thoughts of QA to the beginning of the process, we modified the environment to one in which it was hard for defects to be created in the first place.  In the end, we found no need to create a defect tracking database, and the team was applauded for its quality.  The production launch, which always carries some risk, was a trivial affair, and the system is currently being used by many to perform their daily job.</p>


<p>Our industry stills see QA not as assuring quality, but merely controlling quality through inspection.  Some savvy development managers already have changed traditional QA job descriptions, but there is a long way to go before these notions reach the mainstream of the industry.</p>


<p>What are your experiences with QA?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Becoming a Headspringer: Know thy ReSharper]]></title>
    <link href="http://www.headspringlabs.com/blog/becoming-a-headspringer-know-thy-resharper/"/>
    <updated>2012-02-29T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/becoming-a-headspringer-know-thy-resharper</id>
    <content type="html"><![CDATA[<p>Since I'm new to Headspring and we are hiring, I thought I would help give an edge to anyone applying and subscribing to our blog. There are many “features” (pun attempted) that make up a Headspringer and I’m hoping my fellow Headspring bloggers will help me verbalize them through the “Becoming a Headspringer” blog series. I will be starting this series with some quick tips on <a href="http://www.jetbrains.com/resharper/">ReSharper</a>. If you do not already have ReSharper or know what it is, immediately after reading this post is as good a time as any to try it out.</p>


<p>I was assigned my first development project a few weeks ago and was quickly told my hand reached for the mouse too often by Mr. Justin Pope. If you know me at all, you know that I enjoy shortcuts and dislike the mouse quite a bit. In fact, at my previous job, I removed all of my team members’ mice so they would be forced to learn to navigate with the keyboard for a day. So when  I was told I use the mouse too much, I knew I was going to love it at Headspring and thoroughly enjoy becoming a Headspringer. Shortly after a friendly insult, Mr. Justin Pope gave me a quick crash course in many of the common ReSharper shortcuts and I will share some of those shortcuts with you.</p>


<h2>Navigate to a File</h2>


<p>ctrl+n (to navigate to specific type) or ctrl+shift+n (to navigate to a specific file or folder)</p>


<h2>Highlight within File</h2>


<p>ctrl+w (continue pressing w until everything you want highlighted is highlighted)</p>


<h2>Safe Delete</h2>


<p>alt+del (tells you whether or not it’s safe to delete a method, property, class, etc)</p>


<h2>Go to Usages</h2>


<p>ctrl+alt+f7 (shows all usages of a particular method, property, class, etc)</p>


<h2>Parameter information</h2>


<p>ctrl+p (must be just inside parentheses)</p>


<h2>Create Constructor</h2>


<p>1. alt+insert (not just to insert constructor)</p>


<p>2. Select “Constructor” (if you already have fields defined, it will prompt if you want to initialize them)</p>


<h2>Introduce Variable</h2>


<p>1. Highlight what needs to become a variable</p>


<p>2. ctrl+alt+v</p>


<h2>Move Variable to Outer Scope</h2>


<p>1. Navigate near the variable name</p>


<p>2. alt+enter</p>


<p>3. Select “Move to outer scope”</p>


<h2>Create a New Class or File Based on Another</h2>


<p>1. ctrl+n (to navigate to a similar class) or ctrl+shift+n (to navigate to a similar file)</p>


<p>2. alt+shift+l (to navigate to the file in the Solution Explorer)</p>


<p>3. ctrl+c (to copy)</p>


<p>4. ctrl+v (to paste)</p>


<p>5. F2 (to rename)</p>


<p>6. Enter (to open)</p>


<p>7. Start modifying the file</p>


<p align="left">The shortcuts above are a small percentage of the shortcuts I found useful, but a good start to becoming a more productive developer. You may also notice that not all of these are specifically ReSharper shortcuts, some of them are Visual Studio or Windows shortcuts. Anyhow, you can <a href="http://www.jetbrains.com/resharper/webhelp/Reference__Keyboard_Shortcuts.html">find a more extensive list of ReSharper shortcuts on the Jetbrains site</a>.</p>


<p align="left">As I mentioned above, Headspring is hiring. So if you are interested in being challenged, working with smart people, and being led by a great group of people, <a href="http://www.headspring.com/about-us/careers">apply</a>!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Have Framework Commitment Issues]]></title>
    <link href="http://www.headspringlabs.com/blog/i-have-frameworkcommitment-issues/"/>
    <updated>2012-02-27T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/i-have-frameworkcommitment-issues</id>
    <content type="html"><![CDATA[<p>Once upon a time, a problem was identified. Shortly thereafter a solution was found. After all it wasn't a tough problem and the solution was simple. A commercial framework was selected and the solution was implemented. Then it was re-implemented with an open source framework and then rolled back to the commercial framework. Both frameworks were evaluated and the findings revealed both frameworks had the features and functionality to solve the problem within the context of the solution. So what was the reason for indecisiveness?</p>


<p>To put it simply, it was a matter of commitment to a license.</p>


<p>Many folks in information technology have to evaluate software because there are typically at least two or more software packages that accomplish similar functions. Think about how many content management systems are available. Or how many virtualization solutions you can pick from. How about web servers? Text editors? Operating systems? The list goes on. In the business of software production we are often faced with similar choices. From selecting the programming languages to build tools, from source control to the integrated development environment (IDE), we are constantly tasked with evaluating things and selecting them. We make choices all the time.</p>


<p>In an ideal world, all the decisions would be as simple as picking the right tool for the job. That's where it starts. We start picking the tool for the job. It's not a hard thing to do. You eliminate the tools that don't work at all. Then you exclude those that only solve part of the problem. You may find yourself with no remaining choices and this complicates things. But generally, you find a few tools that work well. It should be easy to just pick one. Right? A coin toss or a random drawing may seem to be all that is needed. But the fact is - in the real world it's not that simple.</p>


<p>Frameworks and software have licenses and the licenses have implications... and that's when you realize, "I have framework commitment issues". How do you overcome these issues when selecting frameworks? It's not always easy, but by asking a few questions the selection can become more apparent.</p>


<p><strong>How is the framework supported?</strong></p>


<p>When things go wrong and you need help, who will be there to help fix the problem? Will you have to fix it yourself?</p>


<p>Most open source software support is provided by the community. The community includes you. So aside from yourself, no one is under any obligation to help you. This means you should have the ability and resources to fix the problem.</p>


<p>Commercially licensed frameworks on the other hand usually offer some type of incident support.</p>


<p>At the end of the day, it falls on you to make sure your solution works and meets expectations. Neither types of licenses free you from this.</p>


<p><strong>Is the framework proven?</strong></p>


<p>Who is using it and what do they have riding on it? Do some homework and ask around. There are many great commercial and open source frameworks.</p>


<p>If you have a lot riding on the framework you are about to select, you may want to conservatively go with a framework that is tried and true. It's a safe bet until you use it in a way that has never been used before, but those situations are rare.</p>


<p>Sometimes, there won't be a tried and true framework available. You should still ask around. It is rare to find yourself in a position where you are attempting something completely new that is not even remotely similar to another problem.</p>


<p>While your problem and solution may be unique, it does not imply that there no other problems or solutions that share similar traits.</p>


<p><strong>What resources are available to help you use the framework?</strong></p>


<p>Is there a book? A user group? A conference? Does anyone offer a training course or certification program? How good is the online documentation? Don't forget to look for a bundled help file.</p>


<p><strong>What does the framework cost? The total cost?</strong></p>


<p>Yes. Commercial software licenses are not free. Some get really expensive. But don't let this deter you from purchasing it.</p>


<p>Open source software is free. Sort of. Think about what it may cost to support it in the event you can't find any community help.</p>


<p>For either type of license, you are likely to incur cost related to learning the framework. Whether it is a developer's time while they research it on the Internet or an intense multi-day certification course, expect to incur some direct and/or indirect cost.</p>


<p>Risk is inevitable. You can minimize this risk by using tried and true frameworks.</p>


<p><strong>Should I build my own?</strong></p>


<p>This is the most expensive and riskiest option. Let me state that one more time for good measure...</p>


<p>This is the most expensive and riskiest option. Sure you won't have to worry about a license fee. You can also be certain you will be the one to support it (even if you open source it). Books, training, events, certifications, and similar resources won't exist unless you make them (or you open source it and even then it’s not guaranteed).</p>


<p>Avoid rolling your own.</p>


<p><strong>How do I make the commitment?</strong></p>


<p>Pick a framework. As a rule of thumb pick a framework that meets your needs the best (even if it has a significant commercial license fee). If you have few good ones to choose from, consider the questions discussed. If you still can't decide... flip a coin.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joining the Dark Side: Learning to Code with Grace and Dignity]]></title>
    <link href="http://www.headspringlabs.com/blog/joining-the-dark-side-learning-to-code-with-grace-and-dignity/"/>
    <updated>2012-01-17T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/joining-the-dark-side-learning-to-code-with-grace-and-dignity</id>
    <content type="html"><![CDATA[<p>Upon the suggestion of a coworker I joined 342,787 people (and counting) with a 2012 resolution to learn how to code.  It’s called <a href="http://codeyear.com/">CodeYear</a>, presented by <a href="http://www.codecademy.com/#!/exercises/0">CodeAcademy</a>, supported by companies like YCombinator, and made viral by the addition of my fellow student, <a href="http://mashable.com/2012/01/05/bloomberg-codecademy/">Michael Bloomberg</a>.   It’s a very simple, learn as you go platform, with big clean buttons and “dumbed down” explanations for the average Joe (or Jill).  I get an email every Monday with a new lesson to work on for the week.  As I progress, I earn badges and bragging rights to publish on Facebook and Twitter.</p>


<p>There are a number of courses and levels to choose from, and I have just completed the first one, “Getting Started with Programming”.  After creating an account, I can sign in and access courses that I am working on and track my progress.</p>


<p>Here are a couple screen shots which demonstrate the clean design and learning module:</p>


<p style="text-align: center;"><a href="http://www.headspring.com/2012/01/joining-the-dark-side-learning-to-code-with-grace-and-dignity/code-academy-courses1-2" rel="attachment wp-att-3178"><img class="aligncenter size-large wp-image-3178" title="code academy courses1" src="http://www.headspring.com/wp-content/uploads/2012/01/code-academy-courses11-1024x554.png" alt="" width="614" height="332" /></a><a href="http://www.headspring.com/2012/01/joining-the-dark-side-learning-to-code-with-grace-and-dignity/code-academy-lesson1" rel="attachment wp-att-3155"><img class="aligncenter size-large wp-image-3155" title="code academy lesson1" src="http://www.headspring.com/wp-content/uploads/2012/01/code-academy-lesson1-1024x554.png" alt="" width="819" height="443" /></a></p>


<p>Now, let me take the time to clearly state that <strong>I have absolutely no intention of becoming a programmer</strong>. If I wanted to be a programmer, there are plenty of resources out there for entering a career in programming, all of which existed long before CodeAcademy came along.  What attracts me to this particular platform is that it is built specifically for non-technical people to learn how to think like a technical person when needed.</p>


<p>I can already tell this is going to be a very beneficial process for me.</p>


<p>I am surrounded by developers at work and at home, and I have found that they are a unique breed of communicators.  You see, in marketing, we care about the ideas, elaborating on them, and we don’t care much for the process of getting from A to B.</p>


<p><strong>Conversely, developers (good ones) care about the process just as much as they care about the conclusion</strong>.  Words, steps, and systems are really important to them.  They think the way code looks!  If a statement at the top of a string of code does not compute correctly, then the statement at the bottom of the string of code cannot compute either, <em>even if</em> that second statement is true.  Let me demonstrate with a snippet from Lesson 8 of “Getting Started with Programming”:</p>


<p style="text-align: center;">The while loop defined in the editor code won't ever run because its condition, times <code>&gt;</code> 0 <code>&amp;&amp;</code>times <code>&lt;</code> 3, is never true since times <code>=</code> 0 and the two conditions 0 <code>&gt;</code> 0 <code>&amp;&amp;</code> 0 <code>&lt;</code> 3 evaluates tofalse.</p>


<p style="text-align: center;">If the conditions of the loop aren't met, the code will be skipped entirely.</p>


<p>Does this read like a familiar scenario? Now that I have been exposed to the process of coding, I am starting to notice the similarities between speaking to a developer and reading what a developer creates.</p>


<p>And the benefits don’t stop with enhanced communication.  I’m looking forward to being a more versatile teammate, not having to ask so many questions, and the possibility of using code to make my daily tasks easier.</p>


<p>But don’t take my word for it.  There are plenty of helpful blogs out there that detail the benefits of learning to code, like this one: <a href="http://www.giftrocket.com/why-marketing-bd-should-learn-to-code">10 Reasons Why Marketing and BD Professionals Should Learn to Code</a>.</p>


<p>So if you have ever considered learning how to code, I encourage you to visit <a href="http://codeyear.com/">CodeYear.com</a>, or follow the <a href="https://twitter.com/#!/search/%23codeyear">#codeyear</a> trending topic on Twitter (follow <a href="https://twitter.com/#!/headspring">@headspring</a> while you're there).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technical Debt: How Much Interest Are You Willing to Pay?]]></title>
    <link href="http://www.headspringlabs.com/blog/technical-debt/"/>
    <updated>2012-01-03T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/technical-debt</id>
    <content type="html"><![CDATA[<p>In a perfect world, you build a product that runs smoothly and effortlessly forever.  It is instantly popular, and is built in such a way that it provides a uniform experience no matter whom or how many gravitate towards it.  Users love it just the way it is, and are pleasantly surprised by each new feature or version. Nothing goes wrong, so this product does not require support staff or maintenance of any kind.  You hire a few developers to add new features here and there, and these employees are completely content to stay in one position at your company forever and ever amen.</p>


<p>However, this is not a perfect world.  Your users are real people, all with varying skill levels, intellect, hardware, expectations, moods, etc.  Same goes for the staff you hire to support the product and develop new features.  Ahh… the human factor.</p>


<p>And then maybe you experience an error or two. Maybe the server shuts down. Maybe your new versions aren’t always compatible. If you’re really lucky, maybe you get hacked. Oh joy!</p>


<p>So, you code.  You code something that will fix the problem.  You code something to patch over what you are dealing with so you don’t have to deal with it again.  Each time you duct tape over a problem with code, it’s as if you have charged the problem to your technical credit card.</p>


<p>The correlation between technical complexity and debt was first proposed by<a href="http://en.wikipedia.org/wiki/Ward_Cunningham"> </a><a href="http://en.wikipedia.org/wiki/Technical_debt">Ward Cunningham</a> in 1992.  Basically, technical debt is the result of trying to fix problems too quickly, without regard for long term consequences.  In my opinion, this nasty cycle stems from our culture of instant gratification.  Software organizations want to fix problems quickly because they don’t want to lose impatient end users. “Fix it; I don’t care how.”</p>


<p>User experience is your most important priority; you don’t want to tinker around with too many questions while the server is down.  However, keep in mind that quick fixes accrue interest.  Piecing a whole system together with quick remedies as you go along is a lot like only paying the minimum payment on your balance. Sometimes, a little bit of debt is okay, as long as you are willing to pay the monthly balance back in full. What I mean by that is you will need to look at the problem in terms of the big picture eventually.</p>


<p>You have to be willing to roll your sleeves up and pull out the engine at some point.  The root of the problem is in there somewhere.  Take a little bit time up front.  When you can, pay for solutions with cash instead of credit.  This means investing your <em>time</em> in looking at how the problem affects the whole system.</p>


<p>How does your organization highlight technical debt so you can go back and deal with it?</p>

]]></content>
  </entry>
  
</feed>
