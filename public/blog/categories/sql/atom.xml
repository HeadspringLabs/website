<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sql | Headspring Labs]]></title>
  <link href="http://headspringlabs.com/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://headspringlabs.com/"/>
  <updated>2013-07-23T20:56:34-05:00</updated>
  <id>http://headspringlabs.com/</id>
  <author>
    <name><![CDATA[Headspring Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Crafting an Extensible Reporting Schema]]></title>
    <link href="http://headspringlabs.com/blog/crafting-an-extensible-reporting-schema/"/>
    <updated>2011-09-28T00:00:00-05:00</updated>
    <id>http://headspringlabs.com/blog/crafting-an-extensible-reporting-schema</id>
    <content type="html"><![CDATA[<p>Traditional relational database schemas are designed to keep computers happy. Indexes, foreign keys, joins...all of these tools allow for the highest level of optimization so data can be recorded and read back in record time. However, humans are typically very <em>un</em>happy when it comes time to answer business questions from this data.</p>


<p>Imagine your boss approaches you and asks for a report of all orders placed by the Acme Corporation on Thursdays. You recall how many times you and your team optimized the database containing this information so data could be written at break-neck speeds and moan when you think of the complex script you'll need to write to retrieve the report your boss requires. Wouldn't it be nice if, instead of lines and lines of arcane SQL, we could ask a database something like the following and get back exactly what we expect?</p>


<pre>&lt;code&gt; select * from Orders where Customer = &#39;Acme&#39; and DayOfWeek = &#39;Thursday&#39;&lt;/code&gt;</pre>


<p>No joins, no convoluted date parsing...in fact, this SQL statement is almost identical to the sentence your boss used, isn't it? How do we get to this level of utopian question-answering? The key is in the concept of "complex writes and simple reads": instead of saving data to a database only in some crazy "normal form" fashion, flatten out your data so you can more easily query against it. Let's take a look at a simple date...say, my birthday this year: 13 December 2011 2:18 PM.</p>


<p>Normally, we'd stick this value into a column designed for holding dates...and that's fine, assuming the only question we'll ever want to ask is "show me something that occurred on 13 December 2011 at 2:18 PM". Unfortunately, that sort of question almost never gets asked. Instead, it's queries like "on Tuesdays" or "in the afternoon". To answer these questions, our schema needs to be modified a bit. The original "date-only" schema might look something like this:</p>


<pre>&lt;code&gt; OrderDate : datetime&lt;/code&gt;</pre>


<p>After we flatten out the date and time, our schema might look something like this:</p>


<pre>&lt;code&gt; Day : int Month : nvarchar Year : int DayOfWeek : nvarchar Hour : int Minute : int PM : bit&lt;/code&gt;</pre>


<p>Given this schema, we can now ask a multitude of questions about the single record represented, such as:</p>


<ul style="margin-bottom: 1.0em;">
<li>How many orders were placed in January?
<pre>&lt;code&gt; select count(1) from Orders where Month = &#39;January&#39;&lt;/code&gt;</pre>
</li>
<li>What orders did Acme place on Friday afternoons?
<pre>&lt;code&gt; select * from Orders where DayOfWeek = &#39;Friday&#39; and PM = &#39;1&#39;&lt;/code&gt;</pre>
</li>
</ul>


<p>Getting data into this type of schema is actually surprisingly easy; in fact, each of these values can be extracted from a single .NET DateTime object:</p>


<pre>&lt;code&gt; var timsBirthday = DateTime.Parse(&quot;13 December 2011 2:18 PM&quot;); var day = timsBirthday.Day; var month = timsBirthday.ToString(&quot;MMMM&quot;); var year = timsBirthday.Year; var dayOfWeek = timsBirthday.DayOfWeek; var hour = timsBirthday.Hour; var minute = timsBirthday.Minute; var pm = timsBirthday.Hour &amp;gt;= 12;&lt;/code&gt;</pre>


<p>It's not just dates that can be flattened out in this manner! For a hypothetical generic Customer object, for example, you can extrapolate (and answer business questions on!) properties like these:</p>


<ul style="margin-bottom: 1.0em;">
<li>Name</li>
<li>Primary Contact</li>
<li>Phone</li>
<li>City</li>
<li>State</li>
<li>ZIP Code</li>
</ul>


<p>Happy reporting!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Glimpse plugin to log SQL generated by NHibernate]]></title>
    <link href="http://headspringlabs.com/blog/creating-a-glimpse-plugin-to-log-sql-generated-by-nhibernate/"/>
    <updated>2011-07-29T00:00:00-05:00</updated>
    <id>http://headspringlabs.com/blog/creating-a-glimpse-plugin-to-log-sql-generated-by-nhibernate</id>
    <content type="html"><![CDATA[<p>Glimpse has generated a lot of buzz since it was <a href="http://channel9.msdn.com/Shows/HanselminutesOn9/Hanselminutes-on-9-Glimpse-at-the-Mix11-Open-Source-Fest" target="_blank">unveiled</a> earlier this year during the “Open Source Fest” at the Mix 2011 conference. If you’re not already using it to debug your ASP.NET Web Forms or MVC application, you should be. Glimpse allows you to inspect several server-side diagnostic and request related information with a UI just like Firebug. Here’s some resources to get you started if you need an intro:</p>


<ul>
<li><a href="http://getglimpse.com/" target="_blank">GetGlimpse.com</a></li>
<li><a href="http://www.hanselman.com/blog/NuGetPackageOfTheWeek5DebuggingASPNETMVCApplicationsWithGlimpse.aspx" target="_blank">NuGet Package of the Week – Glimpse</a></li>
</ul>


<p>There are several <a href="http://getglimpse.com/Help" target="_blank">built-in plugins</a> for Web Forms and MVC that will serve many needs, and you can even create your own. This tutorial will demonstrate how to create a plugin that will display the SQL generated by NHibernate.</p>


<h2>Glimpse Plugins</h2>


<p>Plugins are implemented by a simple class that implements the IGlimpsePlugin interface. There are a couple of great “hello world” example plugins on the Glimpse <a href="http://getglimpse.com/Help/CreatingPlugins" target="_blank">creating plugins page</a>. Besides setting the name and some optional start-up code, a plugin’s main job is just to return some set of data that will be rendered to the Glimpse UI. What that data is and how we get it is the real magic, so read on below.</p>


<p>The actual code for this NHibernate Glimpse plugin is fairly simple. We create a header column, add a row indicating the number of SQL statements that were executed and then add all the actual SQL to the plugin data. The SqlLogger class referenced here is just a static class that acts as a wrapper for the HttpContext.Items collection, which is where we’re logging the SQL itself. You can find a full gist including this class and all of the following code snippets, with comments, <a href="https://gist.github.com/1114503" target="_blank">here</a>.</p>


<p><div><script src='https://gist.github.com/1114428.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<h2>Logging the SQL generated by NHibernate</h2>


<p>The easiest way to log the SQL generated by NHibernate so it can be pushed up to Glimpse is to create a custom Log4Net appender and configure it in the web.config. It’s as simple as creating a class that extends the AppenderSkeleton base class and implement the Append method, like so:</p>


<p><div><script src='https://gist.github.com/1114440.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>Wiring up the web.config:</p>


<p><div><script src='https://gist.github.com/1114446.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<h2>The hard part</h2>


<p>There is no hard part! We’re done! Drop this into an application that’s using NHibernate, enable Glimpse, click over to the new NHibernate tab, and wonder how you ever lived without this.</p>


<p><a href="http://www.headspring.com/wp-content/uploads/2011/07/GlimpseNhibernate.png"><img style="padding-left: 0px; padding-right: 0px; padding-top: 0px; border-width: 0px;" src="http://www.headspring.com/wp-content/uploads/2011/07/GlimpseNhibernate_thumb.png" alt="NHibernate Glimpse Plugin" width="559" height="145" border="0" /></a></p>


<p>The complete source code with comments is available <a href="https://gist.github.com/1114503" target="_blank">here</a>.</p>

]]></content>
  </entry>
  
</feed>
