<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MVC | Headspring Labs]]></title>
  <link href="http://www.headspringlabs.com/blog/categories/mvc/atom.xml" rel="self"/>
  <link href="http://www.headspringlabs.com/"/>
  <updated>2013-07-27T15:45:54-05:00</updated>
  <id>http://www.headspringlabs.com/</id>
  <author>
    <name><![CDATA[Headspring Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MVC Custom Unobtrusive Validator Attribute (Date Range Validation)]]></title>
    <link href="http://www.headspringlabs.com/blog/mvc-custom-unobtrusive-validator-attribute-date-range-validation/"/>
    <updated>2013-03-19T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/mvc-custom-unobtrusive-validator-attribute-date-range-validation</id>
    <content type="html"><![CDATA[<p>There are some useful attributes in MVC that help render dynamic unobtrusive validation to the browser.   The more you can accomplish by simply adding an attribute to a property on a view model the less duplication of JavaScript you have to manage.  Out of the “MVC” box validation for date ranges would require custom JavaScript.  If you have multiple pages that all need to validate ranges, either from the current date or from another date property on your view model, how about having an attribute that you can use to handles this?</p>


<p>In this blog I’m going to cover:</p>


<ul>
<li>Creating a Custom MVC Validation Attribute</li>
<li>Creating a  Client Validation Rule</li>
<li>Creating and wiring up the unobtrusive JavaScript to do the validation</li>
</ul>


<p>First to create a validation Attribute you need to inherit from the <strong>ValidationAttribute</strong>.  To make this validation available on the client you need to implement the <strong>IClientValidatable</strong> interface.  The <strong>ValidationAttribute</strong> is where you define the settable properties that can be used by the View Model.  To handle the validation server side you can override the <strong>IsValid</strong> method to execute your validation logic.  The <strong>IClientValidatable</strong> interface exposes the <strong>GetClientValidationRules</strong> method.  The validation rules are parameters that will be provided to your JavaScript as an array.  The <strong>ModelClientValidationRule </strong>is where you define the Rules/Settings that the <strong>ValidationAttribute</strong> will provide based upon what was supplied when the attribute was applied to a property on a View Model.</p>


<p>Lets look at some code before we go to far.</p>


<p><div><script src='https://gist.github.com/5200208.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>The <strong>DataComparerAttribute</strong> exposes the properties that will be used when the attribute is applied to a property on a View Model.  Notice that the <strong>ModelClientValidationRangeDateRule</strong> exposes the same properties and maps to the validation attribute.  This type is created in the <strong>GetClientValidationRules</strong> method which creates the <strong>ValidationParameters</strong> that will be passed to the Client JavaScript validation method.  Now we have enough to implement the server side <strong>IsValid</strong> method and the client side JavaScript to handle the unobtrusive validation.</p>


<p>With the attribute defined the JavaScript can be created.  The client JavaScript function is linked through the <strong>ModelClientValidationRule.ValidationType</strong> string property.  In this validator the <strong>ValidationType</strong> was set to <em>“rangeDate”</em>.  This value is what we will use to add to the JQuery validator.  There are two JQuery validator concepts we need to link to the magic string <em>“rangeDate”</em> .  The <strong>$.validator.unobtrusive.adapters </strong>which is where MVC will supply the View Model rules from the <strong>GetClientValidationRules</strong> method and the <strong>$.validator.addMethod </strong>which is where the actual JavaScript validation function is defined.</p>


<p><div><script src='https://gist.github.com/5205136.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>Notice the signature of the <strong>$.validator.unobtrusive.adapters </strong>(line 4).  This is where the same array defined in the <strong>ModelClientValidationRangeDateRule.ValidationParameters</strong> lines up to the client code.  MVC will expect the C# and JavaScript to match.  Notice the date format being used to supply the <em>“minDate”</em> and <em>“maxDate”</em>.  Since date formatting can be complicated having the server side format match the client side format helps to make the validation more predictable.</p>


<p>With the attribute complete now we can apply it to our View Model and see it in action.  This validator is designed to do validation based upon a Max Date and a Min Date.  For Min and Max the choices are either a sibling property on the View Model (MinDateSelector and MaxDateSelector) or an interval from DateTime.Now (MinDateAddDaysFromNow, MaxDateAddDaysFromNow).  The *DateSelector will be used to get the current value from the property on the View Model.  When the server side <strong>IsValid</strong> is executed Reflection is used to get the property value.  When the client side JavaScript is executed JQuery is used to get the value from a HTML element on the browser.</p>


<p><div><script src='https://gist.github.com/5205378.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>In the above usage of the attribute the BirthDate must be from January 1st 2013 through the current Date and Time the validation is executed.</p>


<h3>Summary</h3>


<p>Adding custom validation to MVC is useful in reducing duplication of code.  As you can see it’s not all that complicated to do.  The validation methods for server side and client side validation risk having different logic and need to use different mechanisms to get property values.  Reflection and JQuery make this easy enough but there are still gotchas that need to be considered.  When your using JQuery to select a value on a page you need to make sure your selector is unique.  If in our case we have more than one View Model loaded on the page the JQuery Selector could return another html elements value.  I hope this gets you started and can open up some new possibilities for validation.</p>


<p>To see the full example and source code go to <a title="https://github.com/jdmgomoo/MVC-CustomAttributes" href="https://github.com/jdmgomoo/MVC-CustomAttributes">https://github.com/jdmgomoo/MVC-CustomAttributes</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVP vs MVC: Seeking better testability]]></title>
    <link href="http://www.headspringlabs.com/blog/mvp-vs-mvc-seeking-better-testability/"/>
    <updated>2012-04-25T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/mvp-vs-mvc-seeking-better-testability</id>
    <content type="html"><![CDATA[<p>There's something nice about returning to an old design pattern. Comparing it with the pattern you're currently using gives you new insights about both.</p>


<p>When I was writing ASP.NET WebForms apps, my team organized the UI layer with an <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">MVP (Model View Presenter)</a> pattern, preferring the Passive View variant. This allowed us to write Views that were small and lean, pulling as much logic as possible out of that untestable wasteland of UI markup and code-behind. More recently, I've been developing ASP.NET MVC applications (using the <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC (Model View Controller)</a> pattern, naturally), and I like how my Views can be straightforward HTML with a few fill-in-the-blank spots for the data I want to display; much simpler to understand than the old WebForms server controls. But my most recent project, I wrote in <a href="http://windowsclient.net/wpf/">WPF (Windows Presentation Foundation)</a> due to some specific needs of the client, and I had to re-open the UI design pattern question. I decided on MVP, and this gave me a great opportunity to contrast the two patterns.</p>


<p>My goal in choosing <em>any</em> pattern is readable, understandable code. Even if I'm the only developer on the project, reading my own code, if six months have elapsed, it might as well have been written by someone else. Patterns inherently give structure, but more importantly, they are recognizable. Reading the code, you can spot it: "Oh! This is an MVP app. Okay, I'll look for a Presenter class to be managing the interactions with the View. ...There it is!" Future maintainers and enhancers (including your Future Self) will appreciate your consistency; patterns help you write "No Surprises" software. Both MVP and MVC meet this criterion; they are recognizable patterns, each with a distinctive fingerprint.</p>


<p>My secondary pattern-choosing criterion is testability: How well does this pattern let me cover every interesting part of my app with unit tests? While I see the value in integration tests and full-system tests, I'm strongly prejudiced against them. Integration tests are finicky, and full-system tests are slow. I'm unapologetically feisty about my unit tests. The better pattern is the one that not only makes it easy to test, but makes it <em>hard</em> to write untestable code. In other words, prefer the pattern that leads your team to fall into the "<a href="http://blogs.msdn.com/b/brada/archive/2003/10/02/50420.aspx">pit of success</a>." MVC beats MVP on this point. Let me explain.</p>


<p>Consider a continuum, from Untestable Scary Code to Clean, Verified Code. WebForms without the rigor of an MVP pattern, with heavy reliance on the code-behind, is far on the left of that continuum. A lot of business logic and application flow control can be hidden in the least testable layer. When you apply MVP to your WebForms app, the pattern guides you to write very slim code-behind files, with methods that are usually one line long, immediately deferring to the Presenter. This is closer to the middle of the continuum, where you can test your Presenters, provided you trust your Views to remain humble and hand over control promptly. MVC, as implemented by the ASP.NET MVC framework, gives you <strong>no code-behind files</strong>. There's no temptation to put logic into the View because there's hardly anywhere to put it. Control logic naturally fits in the Controller, which is a plain class you can instantiate and exercise in a unit test. The easiest path produces the cleanest result. Nice.</p>


<p>Why did I use MVP at all? It's necessary in a framework that brings the View into existence first. Both WebForms and WPF start a conversation with the user by locating and instantiating a View. The View then constructs its Presenter and injects itself into it. MVC implementations start by instantiating a Controller. Unlike MVP Views, which have to talk to their Presenters, MVC Views can remain ignorant of their Controllers, and this allows them to stay logic-free and focused on rendering the UI. When using MVP, it takes vigilance to make sure your Views never do anything interesting, anything you'll later wish you had covered with a unit test. And anything that takes vigilance is likely to drift over time.</p>


<p>It was fun to revisit my "old" way of structuring applications, because it made me think critically about the relative merits of MVP versus MVC. I had an instinctive feeling for which one I preferred, and comparing them helped me see explicitly that MVC increases my confidence in the correctness of my team's code.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Onion Architecture: part 4 - after four years]]></title>
    <link href="http://www.headspringlabs.com/blog/onion-architecture-part-4-after-four-years/"/>
    <updated>2012-03-29T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/onion-architecture-part-4-after-four-years</id>
    <content type="html"><![CDATA[<p>In 2008, I coined a new pattern name called Onion Architecture.  You can read the previous parts here: <a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-1/">part 1</a>, <a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-2/">part 2</a>, <a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-3/">part 3</a>.  Over these four years, I’ve spoken about this pattern at user groups, conferences, and it’s even published in one of the chapters of <a href="http://manning.com/palermo3">ASP.NET MVC in Action</a> from <a href="http://manning.com/palermo3">Manning</a>.</p>


<p>I’ve been overwhelmed by the traction this pattern name has enjoyed.  Folks from all over the country have written about and have talked about the pattern.  Some of the ones I’ve noticed are here (please comment with more – I welcome it).</p>


<ul>
<li><a href="http://ayende.com/blog/3464/onion-architecture">Ayende Rahien’s opinion on Onion Architecture</a></li>
<li><a href="http://www.cunningclinton.com/post/2011/07/19/Onion-Architecture.aspx">“Cunning” Clinton’s view</a></li>
<li><a href="http://blog.tonysneed.com/2011/10/08/peeling-back-the-onion-architecture/">Tony Sneed’s view and code sample</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/onion-architecture">StackOverflow questions on Onion Architecture</a></li>
<li><a href="http://chicagoalt.net/event/july-2011-meeting-onion-architecture-with-asp-net-mvc">Matt Hidinger’s Chicago .Net User Group video presentation on OA</a></li>
<li><a href="http://stackoverflow.com/questions/9732747/what-type-of-architecture-is-this-called/9933371#9933371">One interesting StackOverflow question.</a></li>
</ul>


<p>&nbsp;</p>


<p>Back in 2008, I defined four tenets of Onion Architecture:</p>


<ul>
<li><em>The application is built around an independent object model</em></li>
<li><em>Inner layers define interfaces.  Outer layers implement interfaces</em></li>
<li><em>Direction of coupling is toward the center</em></li>
<li><em>All application core code can be compiled and run separate from infrastructure</em></li>
</ul>


<p>&nbsp;</p>


<p>Although there has been significant adoption of this pattern, I have received countless questions about how to implement it in various environments.  I mostly get asked about how it relates to domain-driven design.  First, onion architecture works well with and without DDD patterns.  It works well with CQRS, forms over data, and DDD.  It is merely an architectural pattern where the core object model is represented in a way that does not accept dependencies on less stable code.</p>


<p><a href="http://codecampserver.codeplex.com/">CodeCampServer</a> was an original sample of onion architecture, but it also grew as a sample of how to do ASP.NET MVC in various ways, how to use Portable Areas, and how to use <a href="http://mvccontrib.org">MvcContrib</a> features like input builders.  If you are just looking for onion architecture, it has too much going on.  <a href="https://bitbucket.org/jeffreypalermo/onion-architecture">I have pushed a much simpler solution</a> that represents onion architecture concepts.  I have intentionally not included a UI input form or an IoC container, which most people associate with onion architecture.  Onion architecture works just fine without the likes of StructureMap or Castle Windsor.  Please check out the code here and let me know if this presents a simple approach – that is the goal.</p>


<p>When there is enough interest, I will continue this series with more parts.  CQRS definitely deserves some addressing within this architecture, and so do object models that support task-based UIs.</p>


<p>Get the code <a href="https://bitbucket.org/jeffreypalermo/onion-architecture">here at my BitBucket repository</a>.</p>

]]></content>
  </entry>
  
</feed>
