<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: events | Headspring Labs]]></title>
  <link href="http://headspringlabs.com/blog/categories/events/atom.xml" rel="self"/>
  <link href="http://headspringlabs.com/"/>
  <updated>2013-07-20T20:07:32-05:00</updated>
  <id>http://headspringlabs.com/</id>
  <author>
    <name><![CDATA[Headspring Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using WaitHandles to Test Asynchronous Events]]></title>
    <link href="http://headspringlabs.com/blog/using-waithandles-to-test-asynchronous-events/"/>
    <updated>2012-06-20T00:00:00-05:00</updated>
    <id>http://headspringlabs.com/blog/using-waithandles-to-test-asynchronous-events</id>
    <content type="html"><![CDATA[<p><em>By Casey Gum</em></p>


<p>In my last post, I talked about some of the dangers of using lambda expressions (anonymous delegates) as event handlers.  However, one place where this can be really handy is when you are unit testing classes that raise events. </p>


<p>Occasionally, you will find yourself in a situation where you need to unit test a class that raises an event or calls a callback method on a different thread than the one that initiated the action in the first place.  This is especially common when dealing with web requests and can lead to some obtuse unit testing techniques.  In this post, I'll demonstrate a technique that I use that relies on WaitHandles that is pretty darn handy.</p>


<p>Let's say that we have to unit test the following class.</p>


<p><div><script src='https://gist.github.com/2942373.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>This class has a method, StartJob() and an event JobComplete.  StartJob() spins up a new thread and sleeps for the executionTime to simulate work and then raises an event, notifying the caller that the job is complete.  (ProTip: If I initialize the event to an empty delegate{}, I don't have to null-check the event before raising it.)  However, JobComplete is being raised on the new thread.  What implications do you think this will have on a unit test?  Let's take a look.</p>


<p>Here's a unit test one might write that would work perfectly provided there was no thread-switching going on.</p>


<p><div><script src='https://gist.github.com/2942411.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>A test like this *might* even work if there was a thread-switch, but it would all depend on how quickly the code executed and the thread scheduler.  However, I would suspect that most of the time it would fail.</p>


<p>The next approach someone might take to solve this unit testing dilemma is to use a Thread.Sleep() in the unit test.</p>


<p><div><script src='https://gist.github.com/2942427.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>This may work most of the time, but if the unit of work exceeds the period provided in the Thread.Sleep() call, the test will fail even though the class under test functions properly.  But under normal circumstances, it would just make your unit test take longer to run.</p>


<p>Another approach one might take is to use polling and a Thread.Sleep().</p>


<p><div><script src='https://gist.github.com/2942442.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>This one will definitely work and is more time-efficient, but has one big drawback: if the thing being tested actually does fail, this unit test will spin forever and prevent any other unit tests from running.  In a continuous integration or production build environment, it might even take awhile before anyone realizes there's a problem.  The build just doesn't finish.</p>


<p>Okay, next thing to try is to bail out after a certain number of spins.</p>


<p><div><script src='https://gist.github.com/2942450.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>This one will definitely work and will timeout if the test doesn't complete within 30 seconds, but it is obtuse.  Just look at how much code is spent dealing with waiting long enough, but not too long.</p>


<p>A better approach is to use a WaitHandle, specifically the ManualResetEvent class.</p>


<p><div><script src='https://gist.github.com/2942461.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>The whole purpose of WaitHandles is to pass signals across thread boundaries.  Using a WaitHandle is much more concise and is perfectly efficient.  The unit test code will sit there on the waitHandle.WaitOne(timeout) line until either the timeout period expires or the waitHandle.Set() method is called.  If Set() is called, WaitOne() returns true.  If the timeout expires before Set() is called, it returns false.  All you need to do is Assert that the result of WaitOne() is true.</p>


<p>Pretty neat, don't you think?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sneaky Leaky Lambda Listeners]]></title>
    <link href="http://headspringlabs.com/blog/sneaky-leaky-lambda-listeners/"/>
    <updated>2012-06-16T00:00:00-05:00</updated>
    <id>http://headspringlabs.com/blog/sneaky-leaky-lambda-listeners</id>
    <content type="html"><![CDATA[<p><em>By Casey Gum</em></p>


<p>Sometimes, it can be very convenient to use lambda expressions as event handlers.  If the event handler does something short and sweet, it can also be a lot easier to read than having to jump down to the method that implements the handler.</p>


<p>However, as with all events handlers, you really need to understand the lifetime of the instance that exposes the event or you can leak, leak, leak. </p>


<p>Let's take a look at some code.  The following is a typical way to hook up to an event using a method as an event handler.</p>


<p><div><script src='https://gist.github.com/2941654.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>This next block of code uses a lambda expression instead. As you can see, it is much more concise.</p>


<p><div><script src='https://gist.github.com/2941702.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>Interestingly, when you do this, behind the scenes, the compiler will actually add a method to your class.  So, you're really not making your class any smaller, you're just making it easier to read.  You can see this if you look at it using <a title=".Net Reflector" href="http://www.reflector.net/" target="_blank">.Net Reflector</a>.</p>


<p><a href="http://www.headspring.com/wp-content/uploads/2012/06/reflector.png"><img class="alignnone size-full wp-image-5590" src="http://www.headspring.com/wp-content/uploads/2012/06/reflector.png" alt="" width="240" height="91" /></a></p>


<p>Okay, so that's all well and good, but now let's consider the implementation of the <strong>Publisher</strong> class.  For simplicity sake (normally I let my IoC container sort this out), I did a quick Singleton pattern implementation on it so that we can get a Publisher instance by calling the <strong>static</strong> .Instance property.  When you see the "static" keyword, you should really think "immortal".  From the perspective of the GarbageCollector, once it has a value, it's not going away unless you set it to null.</p>


<p>Now, consider this block of code.</p>


<p><div><script src='https://gist.github.com/2941741.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>If you haven't had to deal much with memory leaks in the past, you might think that the code above would nuke all instances of Listener, but it does not.  As a matter of fact, after making the call to this function, here's what <a title=".Net Memory Profiler" href="http://memprofiler.com/" target="_blank">.Net Memory Profiler</a> shows.  We have 10 new instances and they are not going away.</p>


<p><a href="http://www.headspring.com/wp-content/uploads/2012/06/snapshot12-e1339861888756.png"><img class="alignnone size-full wp-image-5593" src="http://www.headspring.com/wp-content/uploads/2012/06/snapshot12-e1339861888756.png" alt="" width="500" height="79" /></a></p>


<p>The following image shows what it looks like to the GarbageCollector.  The static instance of Publisher is rooted and will not go away.  Its event variable is a MulticastDelegate.  The MulticastDelegate holds a reference to a System.Action&lt;string&gt; delegate. And the Action delegate holds a reference to your Listener.  So, even though your listener instance has fallen out of scope, it will survive garbage collection because there is a reference path to it via the Publisher.PublishedMessage event.  Incidentally, this is true whether you use a traditionally implemented event handler or a lambda expression.</p>


<p><a href="http://www.headspring.com/wp-content/uploads/2012/06/root-path1.png"><img class="alignnone size-full wp-image-5594" src="http://www.headspring.com/wp-content/uploads/2012/06/root-path1.png" alt="" width="151" height="445" /></a><a href="http://www.headspring.com/wp-content/uploads/2012/06/root-path21.png"><img class="alignnone size-full wp-image-5596" src="http://www.headspring.com/wp-content/uploads/2012/06/root-path21.png" alt="" width="172" height="450" /></a></p>


<p>What to do, what to do?  Well, one thing we could do is to implement IDisposable and unhook our event handler in the Dispose() method.  Of course, we will also need to actually call Dispose() after we are done with our listener.</p>


<p><div><script src='https://gist.github.com/2941797.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>This totally works and now here's what the memory profiler reports:</p>


<p><a href="http://www.headspring.com/wp-content/uploads/2012/06/snapshot2.png"><img class="alignnone size-full wp-image-5598" src="http://www.headspring.com/wp-content/uploads/2012/06/snapshot2.png" alt="" width="512" height="94" /></a></p>


<p>Can you do the same thing with a lambda listeners?  Unfortunately, no, you cannot, but we can give it a try just to see what happens.  The following is our desperate attempt to unhook a lambda event handler in the Dispose() method.</p>


<p><div><script src='https://gist.github.com/2941810.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>


<p>So, why doesn't that work?  Well, because the compiler is creating a different method for each of our lambdas, one in the constructor and one in Dispose().  Again, this can be proven using .Net Reflector.</p>


<p><a href="http://www.headspring.com/wp-content/uploads/2012/06/reflector2.png"><img class="alignnone size-full wp-image-5599" src="http://www.headspring.com/wp-content/uploads/2012/06/reflector2.png" alt="" width="288" height="188" /></a></p>


<p><strong>CONCLUSION</strong></p>


<p>The C# language makes dealing with events very easy. Unfortunately, by hiding some of the implementation details from the developer, it may lull you into a false sense of security with respect to memory management.  Whenever you are dealing with events, you need to carefully consider the lifetimes of both the publisher and the listener and make sure you unhook your event handlers or risk dealing with OutOfMemoryExecptions that are very difficult to diagnose.  This is ESPECIALLY important if you are doing WPF, Silverlight or Metro development.  If your View Model is listening for events on a long-lived object, and your View is listening to your View Model's INotifyPropertyChanged.PropertyChanged event, and your View's .Parent property holds a reference to its container, you can see that you can easily keep a very large object graph from being garbage collected.</p>


<p>If you are doing UI development, object graph teardown can get extremely complex.  You can simplify these event/lifetime management headaches by using an Event Aggregator that uses weak reference eventing such as the one found in the Microsoft PRISM composite application framework.</p>


<p>I should probably cover that in a future post.</p>


<p>Until then, remember, you can be freaky, but try not to be leaky!</p>


<p>&nbsp;</p>

]]></content>
  </entry>
  
</feed>
