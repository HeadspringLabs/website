<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software | Headspring Labs]]></title>
  <link href="http://headspringlabs.com/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://headspringlabs.com/"/>
  <updated>2013-07-17T20:07:44-05:00</updated>
  <id>http://headspringlabs.com/</id>
  <author>
    <name><![CDATA[Headspring Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The failed record of the software industry–why software people don’t get it]]></title>
    <link href="http://headspringlabs.com/blog/the-failed-record-of-the-software-industrywhy-software-people-dont-get-it/"/>
    <updated>2012-10-18T00:00:00-05:00</updated>
    <id>http://headspringlabs.com/blog/the-failed-record-of-the-software-industrywhy-software-people-dont-get-it</id>
    <content type="html"><![CDATA[<p>The Standish Group is an organization that has been studying and reporting on software projects for many years.&nbsp; In 1995, it reported that only 16.2% of software projects succeeded.&nbsp; In large companies, the number was only 8%.&nbsp; That is, these projects were on time and on budget.&nbsp; In 2012, there is some improvement.&nbsp; The 2012 report discusses waterfall projects and agile projects.&nbsp; A <a href="http://www.mountaingoatsoftware.com/uploads/blog/Agile-Waterfall-Success-Failure-Rates.jpg">summary of the success stats</a> demonstrates that agile projects do improve things across the board.&nbsp; That’s not surprising given that the 1995 report cited lack of stakeholder involvement and incomplete requirements as the top two contributing factors.&nbsp; <a href="http://agilemanifesto.org/principles.html">Agile principles</a> address both of those.&nbsp; </p>


<p>The 2012 report is still fairly damning of the industry as a whole.&nbsp; It cites 12% success rate for waterfall projects and 42% success rates for agile projects.&nbsp; Firms like <a href="http://www.headspring.com/">Headspring</a>, with a 95% success rate, have embraced agile, of course, but there is still so much more to be desired by the track record of the industry.&nbsp; In 2012, 9% of agile projects still out-right fail, and 49% are “challenged”. i.e. they unacceptably ran over budget and/or over schedule – either can have significant impacts on the business.</p>


<p><a href="http://www.headspring.com/wp-content/uploads/2012/10/Car_crash_1.jpg"><img style="background-image: none; border-right-width: 0px; margin: 0px 7px 5px 0px; padding-left: 0px; padding-right: 0px; display: inline; float: left; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Car_crash_1" border="0" alt="Car_crash_1" align="left" src="http://www.headspring.com/wp-content/uploads/2012/10/Car_crash_1_thumb.jpg" width="404" height="304"></a>The industry even pokes fun at itself in a famous Internet meme, “<a href="http://www.snopes.com/humor/jokes/autos.asp">If cars were like software</a>” where we see that we have much more reasonable expectations of our automobiles than we do of software and the people who make software. Somehow, the software vendors/programmers have set the expectations of paying customers (and executives) so low that they celebrate the smallest successes even in the face of massive budget overruns and late launches.</p>


<p><strong>This is not acceptable!&nbsp; </strong>Software people don’t get it.&nbsp; Programmers have been writing mission-critical business systems for decades.&nbsp; The newness is gone.&nbsp; The trial period of “we’re figuring out how to do this” is well over.&nbsp; Now is the time when paying customers must demand more from programmers.&nbsp; </p>


<p>As an executive of a <a href="http://headspring.com">software engineering firm</a>, I see the perspective of our clients.&nbsp; They have a business that is pushing forward in their industries.&nbsp;&nbsp; They have a really old information system that must be revamped in order to take advantage of changes in the industry.&nbsp; Or they need some automation for a brand new market offering.&nbsp; The success of the business initiative rides on many factors, software being one of them.&nbsp; They cannot afford to gamble with a failed $1M (or more) project.&nbsp; Besides the money, once the project calendar has come and gone, you can’t get those months back.&nbsp; Whether you hire a <a href="http://headspring.com">firm</a>, do it in-house, or hire contractors in India, a failed project by any cause could mean the end of the career by the manager in charge of the product or initiative.&nbsp; And it doesn’t have to be this way.</p>


<p>Right now, across the industry, clients are forced to literally gamble with their capital investments and time.&nbsp; With less than 50% of projects (even the new and improved agile variety) succeeding, clients many times have no recourse but to gamble.&nbsp; The smooth-talking sales personnel do their bonding and rapport.&nbsp; Then comes the confidence building.&nbsp; Then the project plan and schedule – all works of fiction.&nbsp; And don’t forget the budget, which magically covers the time period the project plan lays out.&nbsp; Once the project gets started, the software engineers work for a while – hold meetings according to their agile process – track burn-downs, measure lots of agile numbers – then what comes out the other end is your 42% chance of succeeding.&nbsp; </p>


<p>In order to increase the pitiful industry track record, software engineers need to change.&nbsp; And when saying “software engineers”, I’m referring to any person responsible for delivering software. Some companies have a plethora of titles and segmentation of specialty, but it’s all software engineering (i.e. software engineering includes leadership).&nbsp; The bed of education and training currently in place does not produce the results that clients demand.&nbsp; I hope to elaborate more on this soon.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why isn’t software as reliable as a car?]]></title>
    <link href="http://headspringlabs.com/blog/why-isnt-software-as-reliable-as-a-car/"/>
    <updated>2012-03-02T00:00:00-06:00</updated>
    <id>http://headspringlabs.com/blog/why-isnt-software-as-reliable-as-a-car</id>
    <content type="html"><![CDATA[<p>According to this is a popular <a href="http://programmers.stackexchange.com/questions/41050/why-isnt-software-as-reliable-as-a-car">question</a> on Programmers – Stack Exchange, a user once asked a programmer the innocent question, “Why isn’t software as reliable as a car”?</p>


<p>The highest voted and overly pedantic answer is, “it isn’t: cars themselves have software that is far more reliable than the mechanical parts of the car”. I guess that’s what you get when you leave it to programmers to answer such a question.</p>


<p>Maybe some software is reliable, but I bet you’ve used a custom software system that was far less reliable than your car, haven’t you? I know I have. I’ve built a few them in my past. I’ll take my Honda over some custom software systems any day!</p>


<h2>Why is my custom software system so unreliable?</h2>


<p>Of course, there <em>are </em>several answers, and I <em>am</em> a programmer, so can’t just answer this with a single sweeping generalization. The reason software can be unreliable is as complex as unreliable software is – and therein lies the answer!</p>


<p>At Headspring, we’re big fans of the book “<a href="http://en.wikipedia.org/wiki/The_Mythical_Man-Month">The Mythical Man-Month</a>” by Fred Brooks. It’s one of the most important and influential works on the human elements of software engineering. Even our sales and marketing folks have read it – ask them about it!</p>


<p>There are two passages in the Mythical Man-Month that I believe best answer this question.</p>


<h2>Plan to throw one away</h2>


<p>You don’t need to be a vehicle manufacturing expert to understand that to successfully build a new car, you need to go through multiple rounds of designing, prototyping, and testing. Early prototypes are “thrown away” each time until eventually the manufacturer has produced a car that meets all of the design, safety and performance goals. Your Camry is so reliable because it wasn’t the first thing Toyota bolted together.</p>


<p>Yet custom software is often treated differently. “Project after project designs a set of algorithms and then plunges into construction of customer-deliverable software on a schedule that demands delivery of the first thing built. …In most projects, the first system built is barely usable. It may be too slow, too big, awkward to user, or all three.” (Brooks, p.116) You’d never buy a car that was the first prototype out of the design shop, but I bet you’ve purchased or used software that is.</p>


<p>One reason the custom software system you use is less reliable than a car is because its creators likely never planned to throw one away. <em>They delivered the throwaway product to you</em>.</p>


<h2>Complexity and maintenance difficulty</h2>


<p>The other reason software can be unreliable is complexity and maintenance difficulty. “Software entities are more complex for their size than perhaps any other human construct, because no two parts are alike. …software systems differ profoundly from computers, buildings, or automobiles, where repeated elements abound.” (Brooks, p.182)</p>


<p>It may not seem like it, but in some ways software is orders of magnitude more complex than a car. The mechanics of a car engine are constrained by the physical world in ways that software is not. This complexity also makes it hard to maintain systems.</p>


<p>When a mechanic is changing your car’s oil, you can be confident he’s not introducing a defect in your windshield wipers. When you are repairing a flat, it’s unlikely that you’re going to inadvertently cause your radio to lose its station presets. Because software can be so complex, fixing it is far less reassuring: Brooks suggests that fixing a defect has a substantial (20-50%) chance of introducing another. (p.122)</p>


<h2>Reliable custom software</h2>


<p>If you have a custom software system that you don’t trust as much as your car, I wouldn’t be surprised. Software can be immensely complex and built in a way the nearly ensures a lack of reliability. And for every bug fixed, another one might be introduced. Custom software isn’t for the faint of heart.</p>


<p>At Headspring, reliable custom software is our specialty. We employ <a href="http://www.headspring.com/resources/whitepapers/" target="_blank">agile and test-driven development methods</a> to mitigate the challenges of custom software development. Most importantly, we understand that our job isn’t just to build software, but to deliver satisfaction to our clients. A reliable system is worth little if it isn’t the right one for the job.</p>

]]></content>
  </entry>
  
</feed>
