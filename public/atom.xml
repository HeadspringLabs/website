<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Headspring Labs]]></title>
  <link href="http://www.headspringlabs.com/atom.xml" rel="self"/>
  <link href="http://www.headspringlabs.com/"/>
  <updated>2013-09-09T17:12:21-05:00</updated>
  <id>http://www.headspringlabs.com/</id>
  <author>
    <name><![CDATA[Headspring Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Welcome to Headspring Labs]]></title>
    <link href="http://www.headspringlabs.com/blog/welcome-to-headspring-labs/"/>
    <updated>2013-07-20T14:28:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/welcome-to-headspring-labs</id>
    <content type="html"><![CDATA[<p>Headspring Labs is the new home for content, projects, and experiments from all the talented developers and consultants at <a href="http://www.headspring.com">Headspring</a>. This space was built for developers at Headspring, but we decided to share it with the rest of the software world.</p>

<!--more-->


<p>Since we&rsquo;ll be blogging here and adding new content all the time, be sure to <a href="http://www.headspringlabs.com/atom.xml">subscribe</a> to our feed to make sure you&rsquo;re getting all the updates. We also have accounts on <a href="https://twitter.com/HeadspringLabs">Twitter</a> and <a href="https://github.com/HeadspringLabs">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disabling language changes in Visual Studio]]></title>
    <link href="http://www.headspringlabs.com/blog/disabling-language-changes-in-visual-studio/"/>
    <updated>2013-04-12T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/disabling-language-changes-in-visual-studio</id>
    <content type="html"><![CDATA[<p>On a recent project I used a workstation given to me by the client. It was typical &#8220;big enterprise&#8221; setup with support for multiple languages. I discovered there&#8217;s a keyboard shortcut &#8220;Ctrl+Space&#8221; for changing your language that I would keep accidentally activating in Visual Studio. This post explains how to disable that.</p>
<ul>
<li>Go to the control panel.</li>
<li>Choose &#8220;Region and Language&#8221;.</li>
<li>Click the &#8220;Keyboard and Layout&#8221; tab.</li>
<li>Click on &#8220;Change Keyboards&#8221;.</li>
<li>Click on &#8220;Advanced Key Settings&#8221;.</li>
<li>Look over the list of sequences, ensure they are all set to &#8220;none&#8221; for keyboard activation.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVC Custom Unobtrusive Validator Attribute (Date Range Validation)]]></title>
    <link href="http://www.headspringlabs.com/blog/mvc-custom-unobtrusive-validator-attribute-date-range-validation/"/>
    <updated>2013-03-19T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/mvc-custom-unobtrusive-validator-attribute-date-range-validation</id>
    <content type="html"><![CDATA[<p>There are some useful attributes in MVC that help render dynamic unobtrusive validation to the browser.   The more you can accomplish by simply adding an attribute to a property on a view model the less duplication of JavaScript you have to manage.  Out of the “MVC” box validation for date ranges would require custom JavaScript.  If you have multiple pages that all need to validate ranges, either from the current date or from another date property on your view model, how about having an attribute that you can use to handles this?</p>
<p>In this blog I’m going to cover:</p>
<ul>
<li>Creating a Custom MVC Validation Attribute</li>
<li>Creating a  Client Validation Rule</li>
<li>Creating and wiring up the unobtrusive JavaScript to do the validation</li>
</ul>
<p>First to create a validation Attribute you need to inherit from the <strong>ValidationAttribute</strong>.  To make this validation available on the client you need to implement the <strong>IClientValidatable</strong> interface.  The <strong>ValidationAttribute</strong> is where you define the settable properties that can be used by the View Model.  To handle the validation server side you can override the <strong>IsValid</strong> method to execute your validation logic.  The <strong>IClientValidatable</strong> interface exposes the <strong>GetClientValidationRules</strong> method.  The validation rules are parameters that will be provided to your JavaScript as an array.  The <strong>ModelClientValidationRule </strong>is where you define the Rules/Settings that the <strong>ValidationAttribute</strong> will provide based upon what was supplied when the attribute was applied to a property on a View Model.</p>
<p>Lets look at some code before we go to far.</p>
<p><div><script src='https://gist.github.com/5200208.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
<p>The <strong>DataComparerAttribute</strong> exposes the properties that will be used when the attribute is applied to a property on a View Model.  Notice that the <strong>ModelClientValidationRangeDateRule</strong> exposes the same properties and maps to the validation attribute.  This type is created in the <strong>GetClientValidationRules</strong> method which creates the <strong>ValidationParameters</strong> that will be passed to the Client JavaScript validation method.  Now we have enough to implement the server side <strong>IsValid</strong> method and the client side JavaScript to handle the unobtrusive validation.</p>
<p>With the attribute defined the JavaScript can be created.  The client JavaScript function is linked through the <strong>ModelClientValidationRule.ValidationType</strong> string property.  In this validator the <strong>ValidationType</strong> was set to <em>“rangeDate”</em>.  This value is what we will use to add to the JQuery validator.  There are two JQuery validator concepts we need to link to the magic string <em>“rangeDate”</em> .  The <strong>$.validator.unobtrusive.adapters </strong>which is where MVC will supply the View Model rules from the <strong>GetClientValidationRules</strong> method and the <strong>$.validator.addMethod </strong>which is where the actual JavaScript validation function is defined.</p>
<p><div><script src='https://gist.github.com/5205136.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
<p>Notice the signature of the <strong>$.validator.unobtrusive.adapters </strong>(line 4).  This is where the same array defined in the <strong>ModelClientValidationRangeDateRule.ValidationParameters</strong> lines up to the client code.  MVC will expect the C# and JavaScript to match.  Notice the date format being used to supply the <em>“minDate”</em> and <em>“maxDate”</em>.  Since date formatting can be complicated having the server side format match the client side format helps to make the validation more predictable.</p>
<p>With the attribute complete now we can apply it to our View Model and see it in action.  This validator is designed to do validation based upon a Max Date and a Min Date.  For Min and Max the choices are either a sibling property on the View Model (MinDateSelector and MaxDateSelector) or an interval from DateTime.Now (MinDateAddDaysFromNow, MaxDateAddDaysFromNow).  The *DateSelector will be used to get the current value from the property on the View Model.  When the server side <strong>IsValid</strong> is executed Reflection is used to get the property value.  When the client side JavaScript is executed JQuery is used to get the value from a HTML element on the browser.</p>
<p><div><script src='https://gist.github.com/5205378.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
<p>In the above usage of the attribute the BirthDate must be from January 1st 2013 through the current Date and Time the validation is executed.</p>
<h3>Summary</h3>
<p>Adding custom validation to MVC is useful in reducing duplication of code.  As you can see it’s not all that complicated to do.  The validation methods for server side and client side validation risk having different logic and need to use different mechanisms to get property values.  Reflection and JQuery make this easy enough but there are still gotchas that need to be considered.  When your using JQuery to select a value on a page you need to make sure your selector is unique.  If in our case we have more than one View Model loaded on the page the JQuery Selector could return another html elements value.  I hope this gets you started and can open up some new possibilities for validation.</p>
<p>To see the full example and source code go to <a title="https://github.com/jdmgomoo/MVC-CustomAttributes" href="https://github.com/jdmgomoo/MVC-CustomAttributes">https://github.com/jdmgomoo/MVC-CustomAttributes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Windows Installers with the WiX Toolset - Summary]]></title>
    <link href="http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-summary/"/>
    <updated>2013-03-15T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-summary</id>
    <content type="html"><![CDATA[<address>This article is part of a series exploring how to create installers for Windows software.  Here&#8217;s the complete contents of the series.</address>
<address><a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-01/">Part 1 – What Kinds of Software Projects Benefit From an Installer?</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-02/">Part 2 – An Overview Of Windows Installer and its Features</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-03/">Part 3 – Tooling Options for Building Installers</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-04/">Part 4 – The Windows Installer Runtime Sequence</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-5/">Part 5 – The Contents of an MSI</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-6/">Part 6 – The Structure of a WiX File</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-7/">Part 7 – Generating an MSI Package From Your WiX</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-8/">Part 8 – Troubleshooting Installer Runtime Problems</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-summary/">Part 9 - Summary</a><br />
</address>
<p><br/></p>
<h2>Summing It All Up</h2>
<p>We&#8217;ve covered a lot of ground over this series. We&#8217;ve talked about what kind of projects benefit from having an installer and why you should consider making one. We&#8217;ve learned what Windows Installer actually is (a feature of the Windows operating system) and what some of the tooling options for creating installers are. We&#8217;ve explored the sequence of events that occur when installing a package as well as the contents of an actual MSI package. We&#8217;ve dived into the basic structure of a WiX file and how an understanding of the Windows Installer concepts makes authoring WiX files easier. Coming full circle, we&#8217;ve created an installer package from WiX source with the WiX tooling.</p>
<p>There&#8217;s certainly a lot left we could discuss: automatic file harvesting, custom actions, etc. However I haven&#8217;t had much feedback on the series up to this point: Windows Installer is a niche topic in software development, especially with the rise of the web. I&#8217;m thinking about moving on to other topics.</p>
<h2>Last Call&#8230;</h2>
<p>Is there something you want to know that I haven&#8217;t covered yet? This is the time to leave feedback in the comments if you want to see more articles in this series. Thanks for reading with me!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Windows Installers with the WiX Toolset Part 8]]></title>
    <link href="http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-8/"/>
    <updated>2013-03-15T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-8</id>
    <content type="html"><![CDATA[<address>This article is part of a series exploring how to create installers for Windows software.  Here&#8217;s the complete contents of the series.</address>
<address><a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-01/">Part 1 – What Kinds of Software Projects Benefit From an Installer?</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-02/">Part 2 – An Overview Of Windows Installer and its Features</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-03/">Part 3 – Tooling Options for Building Installers</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-04/">Part 4 – The Windows Installer Runtime Sequence</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-5/">Part 5 – The Contents of an MSI</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-6/">Part 6 – The Structure of a WiX File</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-7/">Part 7 – Generating an MSI Package From Your WiX</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-8/">Part 8 – Troubleshooting Installer Runtime Problems</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-summary/">Part 9 - Summary</a><br />
</address>
<p><br/><span style="font-size: 13px;">This entry describes how to enable diagnostic logging when running an installer and some tools for analyzing the output.</span></p>
<h2>Troubleshooting Runtime Problems - When All Else Fails, Print</h2>
<p>Let’s face it: things don’t always work the way they’re supposed to and installers are no different. If you’re making anything more complex than the simple Hello World example we’ve been using in this series, you’re going to run into situation where something doesn’t work quite right and you can’t figure out why.</p>
<p>Probably the world’s oldest debugging technique that predates debuggers themselves is printing a line of output with the current program location and variable values at runtime.  Windows installer doesn’t provide a native way to do this in the UI itself, but we do have the next best thing: log files.</p>
<h2>Enabling Logging During an Installation</h2>
<pre>Use msiexec (builts into Windows) to run your msi in a diagnostic mode and get a log file. Here’s an example invocation that asks for verbose logging into a file called HelloWorld.log: &#160;%windir%\system32\msiexec.exe /i artifacts\installer\HelloWorld.msi /l*v HelloWorld.log</pre>
<p>The content of the log for our simple Hello World is 749 lines. I’m obviously not going to paste it in here, but I will briefly describe some of the contents you’ll see in a log file.</p>
<ul>
<li>Machine environment settings, such as whether the computer can have patches applied or not</li>
<li>The value of properties (variables), such as the install directory</li>
<li>The beginning and end of the execute stage</li>
<li>The value of all properties at the end of the installation</li>
</ul>
<p>Most importantly, any errors that occurred should be contained here as well. You can simply search through the log for “error”.</p>
<h2>Tools for Analyzing a Log File</h2>
<p>I have not gotten a large amount of use from the tool I’m about to introduce, but I want to make you aware of it because it might be valuable to you.</p>
<p>The Windows SDK includes a utility reader for installer logs located at %PROGRAMFILES%\Microsoft SDKs\Windows\v7.1\Bin (or something similar). The utility is named WiLogUtl.exe. When you start the log analyzer, you’ll need to browse to your log file and open it. I’ve already done that step in the screenshot below.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/03/logAnalyzer.png"><img class="alignnone size-full wp-image-6466" alt="logAnalyzer" src="http://www.headspring.com/wp-content/uploads/2013/03/logAnalyzer.png" width="638" height="335" /></a></p>
<p>When you click Analyze, you’re taken to another screen.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/03/analysis.png"><img class="alignnone size-full wp-image-6467" alt="analysis" src="http://www.headspring.com/wp-content/uploads/2013/03/analysis.png" width="669" height="545" /></a></p>
<p>The most prominent UI element at the top is an errors list. Our log doesn’t have any, but this view makes it easy to see them all in one place.<br />
We also have a variety of options on the right. States will show you the detected status of the features in your package – whether they are already installed or not. Properties will give you a list of all the properties (variables) and their values in your installer.</p>
<p>The HTML Log is rather nice because it will color code all the log entries by category, and provide controls for navigating between any errors.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/03/htmlLogFile.png"><img class="alignnone size-large wp-image-6468" alt="htmlLogFile" src="http://www.headspring.com/wp-content/uploads/2013/03/htmlLogFile-970x709.png" width="970" height="709" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Windows Installers with the WiX Toolset Part 7]]></title>
    <link href="http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-7/"/>
    <updated>2013-03-15T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-7</id>
    <content type="html"><![CDATA[<address>This article is part of a series exploring how to create installers for Windows software.  Here&#8217;s the complete contents of the series.</address>
<address><a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-01/">Part 1 – What Kinds of Software Projects Benefit From an Installer?</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-02/">Part 2 – An Overview Of Windows Installer and its Features</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-03/">Part 3 – Tooling Options for Building Installers</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-04/">Part 4 – The Windows Installer Runtime Sequence</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-5/">Part 5 – The Contents of an MSI</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-6/">Part 6 – The Structure of a WiX File</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-7/">Part 7 – Generating an MSI Package From Your WiX</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-8/">Part 8 – Troubleshooting Installer Runtime Problems</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-summary/">Part 9 - Summary</a><br />
</address>
<p><br/><br />
This post explains how to create an MSI installer from the WiX files you’ve written from either the command line or within Visual Studio.</p>
<h2>The Missing Magic</h2>
<p>So we’ve discussed how an MSI is an installer package that Windows can process and taken a peek at what the insides of an MSI looks like, and then we’ve examined a simple WiX file that can be used to create an MSI and how WiX schema is heavily tied to the entities of Windows Installer.  But we don’t quite have the complete picture yet – how do we magically get our MSI once we’ve authored some WiX?</p>
<h2><a href="http://www.headspring.com/wp-content/uploads/2013/03/magicHappensHere.png"><img class="alignnone size-full wp-image-6459" alt="magicHappensHere" src="http://www.headspring.com/wp-content/uploads/2013/03/magicHappensHere.png" width="800" height="233" /><br />
</a>It&#8217;s Just A Compiler</h2>
<p>So the answer is 42.  <a href="http://en.wikipedia.org/wiki/Answer_to_The_Ultimate_Question_of_Life,_the_Universe,_and_Everything#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe.2C_and_Everything_.2842.29">Just kidding.</a>  The answer is that the WiX toolset comes with its own compiler and linker tools.  If you’ve ever set up an automated build, this is the WiX equivalent of MsBuild.exe (or if you’re really hard core, csc.exe).  Most of the tooling in WiX is related to candles in some fashion (WiX sounds like “wicks”, the burning portion of a candle), so you might find it amusing to learn the name of the compiler is “candle”, and the linker is called “light”.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/03/candleAndLight.png"><img class="alignnone size-full wp-image-6460" alt="candleAndLight" src="http://www.headspring.com/wp-content/uploads/2013/03/candleAndLight.png" width="499" height="299" /></a></p>
<p>There are two ways you can run the compiler:  through the command line, or as an integrated extension of Visual Studio.  I’ll discuss both below.</p>
<h2>From the Command Line</h2>
<p>This is my preferred method.  Usually when I’m building an installer, I’ve had to do some PowerShell scripting to stage the output that I want to be packaged up by the installer.  This is usually artifacts like help files, shortcut icons, and so forth.  This is also the primary method for getting an installer compilation rolled into your automated build (you might be able to use Votive with TFS, you’ll have to verify that with someone that willingly uses TFS).</p>
<p>Invocation looks something like this in a simple bat file:</p>
<pre>rem If we don&#39;t specify an output directory, the wixobj files will get dumped in the current working directory of the bat file</pre>
<pre>tools\wix\candle.exe src\installer\HelloWorld.wxs -out artifacts\wix\</pre>
<pre>tools\wix\light.exe artifacts\wix\HelloWorld.wixobj -out artifacts\wix\HelloWorld.msi</pre>
<pre></pre>
<pre>rem Move the final output for exposure to CI build or shared network folder</pre>
<pre>copy artifacts\wix\HelloWorld.msi artifacts\installer</pre>
<h2> Inside Visual Studio</h2>
<p>The WiX tooling comes with a Visual Studio extension called Votive.  I mentioned it earlier how you can use it to get IntelliSense when editing your WiX files.  Votive also makes it possible to compile your WiX when doing a build in Visual Studio.</p>
<p>If you examine the properties of your WiX project, you’ll find a host of options for controlling your compilation.</p>
<p>The Installer tab lets you name your output file, and choose alternate output types if you happen to need something besides MSI (if you don’t know otherwise, then stick with MSI).</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/03/buildTab.png"><img class="alignnone size-large wp-image-6461" alt="buildTab" src="http://www.headspring.com/wp-content/uploads/2013/03/buildTab-970x335.png" width="970" height="335" /></a></p>
<p>&nbsp;</p>
<p>The Build tab allows you to specify values for your preprocessor variables (WiX supports preprocessing similar to C and C++ compilers), and where to place your output.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/03/buildTab1.png"><img class="alignnone size-full wp-image-6462" alt="buildTab" src="http://www.headspring.com/wp-content/uploads/2013/03/buildTab1.png" width="673" height="642" /></a></p>
<p>&nbsp;</p>
<p>The Tool Settings tab can be used to ignore ICE validation on your package (although I’d suggest leaving it on, you always want to know about potential problems), and pass additional arguments to the compiler and linker.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/03/toolSettings.png"><img class="alignnone size-full wp-image-6463" alt="toolSettings" src="http://www.headspring.com/wp-content/uploads/2013/03/toolSettings.png" width="655" height="521" /></a></p>
<p>&nbsp;</p>
<p>When you compile the project in Visual Studio, if you look carefully at the build output you’ll see that it’s simply invoking candle and light for you under the hood:</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/03/votiveOutput.png"><img class="alignnone size-large wp-image-6464" alt="votiveOutput" src="http://www.headspring.com/wp-content/uploads/2013/03/votiveOutput-970x158.png" width="970" height="158" /></a></p>
<p>&nbsp;</p>
<p>If you do use Votive, you probably won’t want to build the installer in debug configuration.  Otherwise you’ll have to wait for an installer to build every time you recompile the solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Windows Installers with the WiX Toolset Part 6]]></title>
    <link href="http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-6/"/>
    <updated>2013-02-28T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-6</id>
    <content type="html"><![CDATA[<address>This article is part of a series exploring how to create installers for Windows software.  Here&#8217;s the complete contents of the series.</address>
<address><a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-01/">Part 1 – What Kinds of Software Projects Benefit From an Installer?</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-02/">Part 2 – An Overview Of Windows Installer and its Features</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-03/">Part 3 – Tooling Options for Building Installers</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-04/">Part 4 – The Windows Installer Runtime Sequence</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-5/">Part 5 – The Contents of an MSI</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-6/">Part 6 – The Structure of a WiX File</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-7/">Part 7 – Generating an MSI Package From Your WiX</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-8/">Part 8 – Troubleshooting Installer Runtime Problems</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-summary/">Part 9 - Summary</a><br />
</address>
<p><br/></p>
<h2>Summary</h2>
<p>This post is a companion to the previous post in Part 5 - it shows and explains the structure of the WiX file that was used to generate the MSI.</p>
<h2>Tooling and References For Editing WiX Files</h2>
<p>Since the name of the toolkit is &#8220;Windows Installer in XML&#8221;, you probably won&#8217;t be terribly surprised to find out that the source files you edit are&#8230;wait for it&#8230;XML. This means you can author and edit in your favorite XML editor of choice, whether that&#8217;s Notepad++, some incredibly expensive specialty tool like Altova XML Spy, or Visual Studio. If you use Visual Studio and you&#8217;ve installed WiX on your local machine, you can leverage the included Votive project types to get Intellisense in Visual Studio.</p>
<p>[caption id=&#8221;attachment_6409&#8221; align=&#8221;alignnone&#8221; width=&#8221;582&#8221;]<a href="http://www.headspring.com/wp-content/uploads/2013/02/votiveIntellisense.png"><img class=" wp-image-6409 " alt="Picture of editing with Visual Studio and Intellisense supplied by Votive" src="http://www.headspring.com/wp-content/uploads/2013/02/votiveIntellisense-970x562.png" width="582" height="337" /></a> Visual Studio Intellisense with Votive[/caption]</p>
<p>There&#8217;s reference documentation for the schema at <a href=" http://wix.sourceforge.net/manual-wix3/schema_index.htm">SourceForge</a>. The first link is for the WiX schema itself, and there are other schema references for the various extensions that are available.</p>
<h2>The Complete Hello World</h2>
<p><div><script src='https://gist.github.com/5014691.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
<h2>Dissecting the Elements</h2>
<p>Line 3 is pretty straightforward: declare our root Wix element and specify the namespace. No that isn&#8217;t a typo at the end; the namespace really doesn&#8217;t have an x at the end of it. I have no idea why.</p>
<p>Line 5 declares our Product for the installer (recall Product has a cardinality of 1). Some of the supporting attributes like Manufacturer, Name, and Version will show up in the Add Program and Features list for Windows.</p>
<p>Line 12 defines the Package (also cardinality of 1), which is the installer itself. Attributes here will show up in the properties of the MSI file.</p>
<p>Line 19 introduces the concept of Media, which wasn&#8217;t discussed in the MSI examination. Windows Installer has a profuse amount of options for the physical layout of the files to be deployed, including things like spanning multiple DVDs (or floppies - <a href="http://superuser.com/questions/231273/what-are-the-windows-a-and-b-drives-used-for">remember those?</a> The need for this has fallen by the wayside as most software is downloaded from the internet or an internal network these days. In this example, we only have one physical media target, and the EmbedCab attribute will package all the deployables into the MSI directly since we don&#8217;t need disc spanning.</p>
<p>Line 21 defines our target directory structure. Note it&#8217;s nested. I&#8217;m not going to discuss it exhaustively, but will point out a few interesting things. Line 22 specifies we&#8217;re installing into this machine&#8217;s Program Files directory, and line 23 is the INSTALLDIR, which is our root target directory. More sophisticated installers will allow the user to specify their own directory and replace the value of INSTALLDIR.</p>
<p>Line 24 defines our one and only component. Recall from the previous post its possible for a component to have more than one deployable in it, but there are advantages to having a component for every file. Components have a unique ID to identify them.</p>
<p>In this example we&#8217;ve associated our component with a target directory by simply nesting it under the desired directory. This works for simple scenarios, but if you have more than one target directory for your product or if your code generating your component definitions, it might be easier to declare the directory structure and components separately and use the DirectoryRef attribute on the component to make the association.</p>
<p>Line 25 contains a file that is part of this component. The name attribute is what the file will be called when it is placed on the target file system, and the source attribute specifies where to get the file when compiling the MSI package.</p>
<p>Line 26 does what you hopefully would guess; it removes the installation folder from the machine when the component &#8216;MainExecutable&#8217; gets uninstalled.</p>
<p>Line 32 finishes things out by declaring our single feature (although you&#8217;ll recall there could be multiple Features in a Product), and associating our component with it.</p>
<h2>Tying It All Together</h2>
<p>So we have:</p>
<ul>
<li>File HelloWorld.exe containing our executable</li>
<li>Component MainExecutable containing the HelloWorld.exe File</li>
<li>Directory INSTALLDIR (which itself is a subdirectory) associated with the MainExecutable Component</li>
<li>Feature called Complete containing the MainExecutable Component</li>
<li>Product that contains the Complete Feature (this is implied and doesn&#8217;t have to be explicitly defined)</li>
</ul>
<p>All of this maps neatly to the MSI we took apart in the <a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-05/">last post</a>. In the next installment, we&#8217;ll look at the process for actually turning WiX into an MSI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Windows Installers with the WiX Toolset Part 5]]></title>
    <link href="http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-5/"/>
    <updated>2013-02-26T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-5</id>
    <content type="html"><![CDATA[<address>This article is part of a series exploring how to create installers for Windows software.  Here&#8217;s the complete contents of the series.</address>
<address><a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-01/">Part 1 – What Kinds of Software Projects Benefit From an Installer?</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-02/">Part 2 – An Overview Of Windows Installer and its Features</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-03/">Part 3 – Tooling Options for Building Installers</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-04/">Part 4 – The Windows Installer Runtime Sequence</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-5/">Part 5 – The Contents of an MSI</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-6/">Part 6 – The Structure of a WiX File</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-7/">Part 7 – Generating an MSI Package From Your WiX</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-8/">Part 8 – Troubleshooting Installer Runtime Problems</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-summary/">Part 9 - Summary</a><br />
</address>
<p><br/></p>
<h2>Summary</h2>
<p>This post discusses what an MSI is, We&#8217;ll use a Microsoft SDK tool called Orca to examine what the internal structure looks like.  We&#8217;ll also talk about how the internal structure maps to Windows Installer concepts.  While this post is not about WiX directly, authoring in WiX requires a good understanding of these internal structures and how they interconnect.</p>
<h2>The Contents of an MSI</h2>
<p>If you&#8217;ve installed several software applications like Office or Halo on your computer, chances are you&#8217;ve come across a file with type of MSI.  MSI stands for Microsoft Installer, and is the primary package type that Windows Installer consumes to install a product.</p>
<p>There are other file types used by Windows Installer, but MSI is the only &#8220;required&#8221; type for making an installer.  I&#8217;m not going to discuss the other types, but you can find out more about them <a href="http://msdn.microsoft.com/en-us/library/aa372842.aspx">here</a>.</p>
<p>For our dissection we&#8217;re going to use an MSI that installs a single file - HelloWorld.exe.  Here&#8217;s the installer:</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/msi.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="msi" alt="msi" src="http://www.headspring.com/wp-content/uploads/2013/01/msi_thumb.png" width="244" height="83" border="0" /></a></p>
<p>The installer has no user interface.  This is what happens when you double click the MSI to install it:</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/installing.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="installing" alt="installing" src="http://www.headspring.com/wp-content/uploads/2013/01/installing_thumb.png" width="244" height="94" border="0" /></a></p>
<p>What happens next is the window changes to say &#8220;Please wait while Windows configures Edgewolf HelloWorld&#8221; with a progess bar, and then performs the installation and closes.  This happens so fast I couldn&#8217;t get a screenshot of it before it disappeared.  After we run the installer, we have a new entry in Programs and Features that looks like this:</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/programsAndFeatures.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="programsAndFeatures" alt="programsAndFeatures" src="http://www.headspring.com/wp-content/uploads/2013/01/programsAndFeatures_thumb.png" width="244" height="58" border="0" /></a></p>
<p>And we can find our installed program here:</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/installed.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="installed" alt="installed" src="http://www.headspring.com/wp-content/uploads/2013/01/installed_thumb.png" width="244" height="83" border="0" /></a></p>
<p>It doesn&#8217;t get much simpler then that, right?</p>
<h2>MSI Internal Structure</h2>
<p>It&#8217;s interesting how trends in software development affect technical implementations.  For example, the programming language Java was rising to prominence around the same time the XML file format was being widely touted as THE way to store data for a variety of reasons.  As a result, Java Enterprise Edition (J2EE) relies heavily on XML files, to the point that I&#8217;ve heard jokes that enterprise Java development consists of writing one line of code and editing twenty XML files.</p>
<p>Windows Installer is no different, and its source of large inspiration is relational databases.  An msi package is, quite literally, a database file with tables and rows in it.  Here&#8217;s a partial schema diagram:</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/payloadTables.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="payloadTables" alt="payloadTables" src="http://www.headspring.com/wp-content/uploads/2013/01/payloadTables_thumb.png" width="244" height="111" border="0" /></a></p>
<p>Since an installer is for a single product, there&#8217;s dedicated table for that.  But a product like Microsoft Office does have multiple features such as Word, Excel, and PowerPoint.  Large features will typically be composed of a collection of subfeatures that can be installed or not installed and still have a working feature.  Examples of subfeatures for Word would be items like spellcheck, or clipart.</p>
<p>Features and subfeatures are &#8220;above the water&#8221; concepts in the way that they are exposed directly to the person using the installer.  The user sees them and has a chance to choose what features they do or do not want.</p>
<p>Features are composed of one or more components.  Components are tangible items like files, start menu shortcuts, and registry entries.  Components are &#8220;below the water&#8221; in the sense that they aren&#8217;t meant to be exposed to users.  When you&#8217;re installing Word, you could care less that you&#8217;re getting the files winword.exe, wordcnv.dll, wordcnvpxy.cnv&#8230;.well you get the idea.  Components are linked to a directory where they are installed, and are composed of one or more files.  Because the directory link is at the component level, obviously all of the files in the component need to target the same directory.</p>
<p>Components are tied to features with a linking Feature Component table.</p>
<p>In addition to the payload tables we just looked at, an MSI also has sequence tables that instruct Windows Installer what steps to execute and in what order.  There are a number standard actions included in Windows Installer such as calculating the disk space needed to perform the installation.  It&#8217;s also possible to write your own custom actions, I plan on talking about that in a later post.</p>
<h2>Installing Orca</h2>
<p>Microsoft provides a free tool called Orca that can be used to examine an MSI file.  It isn&#8217;t part of Windows, but it&#8217;s included with the Windows 7 SDK.  You can get an ISO of the Windows 7 SDK <a href="http://www.microsoft.com/en-us/download/details.aspx?id=8442">here</a> and the Windows 8 SDK is available <a href="http://msdn.microsoft.com/en-us/windows/hardware/hh852363.aspx">here</a>.</p>
<p>Once you&#8217;ve installed the SDK, you can find an installer for Orca in the Bin directory (something similar to C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin).  Run the installer, and then you&#8217;ll have Orca in your start menu.</p>
<h2>Examining the Hello World MSI</h2>
<p>Start Orca.  Click File..Open, and open the MSI you want to load.  Here’s what you’ll see:</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/msiTablesInOrca.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="msiTablesInOrca" alt="msiTablesInOrca" src="http://www.headspring.com/wp-content/uploads/2013/01/msiTablesInOrca_thumb.png" width="244" height="179" border="0" /></a></p>
<p>In addition to tables, the installer stores some nonrelational information in a Summary Stream.  You can view this by clicking &#8220;View..Summary Information&#8221;.  Most of it is product related, but the target architecture (32bit or 64bit) is also stored here.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/summaryStreamInOrca.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="summaryStreamInOrca" alt="summaryStreamInOrca" src="http://www.headspring.com/wp-content/uploads/2013/01/summaryStreamInOrca_thumb.png" width="229" height="244" border="0" /></a></p>
<p>Looking at the feature table, we see this installer only has one feature - Complete (as in a complete install).</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/tableFeature.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="tableFeature" alt="tableFeature" src="http://www.headspring.com/wp-content/uploads/2013/01/tableFeature_thumb.png" width="244" height="53" border="0" /></a></p>
<p>The FeatureComponent table links one component to our feature, the component called MainExecutable.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/tableFeatureComponent.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="tableFeatureComponent" alt="tableFeatureComponent" src="http://www.headspring.com/wp-content/uploads/2013/01/tableFeatureComponent_thumb.png" width="244" height="75" border="0" /></a></p>
<p>Heading over to the component table, we see MainExecutable, and it targets the INSTALLDIR for the directory.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/tableComponent.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="tableComponent" alt="tableComponent" src="http://www.headspring.com/wp-content/uploads/2013/01/tableComponent_thumb.png" width="244" height="54" border="0" /></a></p>
<p>The INSTALLDIR is going into an Edgewolf HelloWorld subdirectory under Program Files.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/tableDirectory.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="tableDirectory" alt="tableDirectory" src="http://www.headspring.com/wp-content/uploads/2013/01/tableDirectory_thumb.png" width="244" height="71" border="0" /></a></p>
<p>So where&#8217;s the actual exe?  In the File table, and we see its linked to the MainExecutable component.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/tableFile.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="tableFile" alt="tableFile" src="http://www.headspring.com/wp-content/uploads/2013/01/tableFile_thumb.png" width="244" height="54" border="0" /></a></p>
<p>I didn&#8217;t mention it earlier, but there&#8217;s also a Property table that&#8217;s a catch-all name value pair collection.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/tableProperty.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="tableProperty" alt="tableProperty" src="http://www.headspring.com/wp-content/uploads/2013/01/tableProperty_thumb.png" width="244" height="170" border="0" /></a></p>
<p>The sequence tables instruct Windows Installer in what steps to take to run the installer.  Recall that there are two install stages (the UI stage and the Execution stage).  There are tables for each, and looking at the pictures below we can see the difference between the two:</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2013/01/installUiSequence.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="installUiSequence" alt="installUiSequence" src="http://www.headspring.com/wp-content/uploads/2013/01/installUiSequence_thumb.png" width="244" height="115" border="0" /></a><a href="http://www.headspring.com/wp-content/uploads/2013/01/installExecuteSequence.png"><img style="background-image: none; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="installExecuteSequence" alt="installExecuteSequence" src="http://www.headspring.com/wp-content/uploads/2013/01/installExecuteSequence_thumb.png" width="244" height="191" border="0" /></a></p>
<p>That&#8217;s enough for this post.  Now we have a solid understanding of the basic building blocks in an installer package.  In the next post we&#8217;ll take a look at the WiX that generated this MSI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WCF IOC Away the need for Named Pipes]]></title>
    <link href="http://www.headspringlabs.com/blog/wcf-ioc-away-the-need-for-named-pipes/"/>
    <updated>2013-02-13T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/wcf-ioc-away-the-need-for-named-pipes</id>
    <content type="html"><![CDATA[<p>The NetNamedPipeBinding is the optimized binding for on-machine communication.  For most WCF implementations I have seen WCF is really only there to help facilitate RPC (Remote Procedure Calls).  When WCF is simply a way to segment your service layer into an optionally distributed deployment architecture there may be a much better way.  WCF has additional overhead that seams useless if the code is being executed on the same machine.  IOC (Inversion of Control) using DI (Dependency Injection) provides a relatively simple way to avoid WCF all together.</p>
<p>Lets take a simple WCF Service Contract for Customers.<br />
<div><script src='https://gist.github.com/4945825.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
<p>The client creates a proxy and through WCF configuration the proper binding can be used to communicate with the Service.  In order to make the client know where the service is without hardcoding this you would have the following configuration settings.</p>
<pre class="csharpcode">  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;basicHttpBinding&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;BasicHttpBinding_ICustomerService&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;basicHttpBinding&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;endpoint&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;http://localhost:26859/CustomerService.svc&quot;&lt;/span&gt;
        &lt;span class=&quot;attr&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;basicHttpBinding&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;bindingConfiguration&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;BasicHttpBinding_ICustomerService&quot;&lt;/span&gt;
        &lt;span class=&quot;attr&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;OptionalWCF.Contracts.ICustomerService&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;BasicHttpBinding_IUserProfileService&quot;&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;system.serviceModel&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;</pre>
<p>Most clients stop there rather than have a explicit setting for NetNamedPipes.  If they decided to “Optimize” they could add the WCF configuration endpoint for NetNamedPipes and modify the Service to expose a NetNamedPipe endpoint.  Now the client can use the NetNamedPipe endpoint and the performance has been improved.  In reality the performance between NetTcp and NetNamedPipe is rather minimal with a slighter advantage over BasicHttp.  The most optimal invocation is in-process so why not just go around WCF all together.  We already have the interface separation that DI can use and either way if we want optimal performance we will be tweaking configuration files for different deployment environments.</p>
<p>For this blog I choose StructureMap as my DI library.  My client Code only needs to get a handle to the interface.</p>
<div class="csharpcode">
<pre class="alt">var customerServices = ObjectFactory.GetInstance&amp;lt;ICustomerService&amp;gt;();</pre>
</div>
<p>The client is configured to either use WCF or use the direct reference to the service implementation of the service Contract.</p>
<pre class="csharpcode">&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;StructureMap&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;MementoStyle&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;Attribute&quot;&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;rem&quot;&gt;&amp;lt;!-- WCF Service Through Proxy --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kwrd&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;DefaultInstance&lt;/span&gt;
      &lt;span class=&quot;attr&quot;&gt;PluginType&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;OptionalWCF.Contracts.ICustomerService, OptionalWCF&quot;&lt;/span&gt;
      &lt;span class=&quot;attr&quot;&gt;PluggedType&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;OptionalWCF.Client.CustomerServiceProxyWrapper, OptionalWCF.Client&quot;&lt;/span&gt;
      &lt;span class=&quot;attr&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;=&quot;Singleton&quot;&lt;/span&gt;
      &lt;span class=&quot;kwrd&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;rem&quot;&gt;&amp;lt;!--Real Service--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;rem&quot;&gt;&amp;lt;!--&amp;lt;DefaultInstance&lt;/span&gt;
&lt;span class=&quot;rem&quot;&gt;      PluginType=&quot;OptionalWCF.Contracts.ICustomerService, OptionalWCF&quot;&lt;/span&gt;
&lt;span class=&quot;rem&quot;&gt;      PluggedType=&quot;OptionalWCF.ServiceImpl.CustomerService, OptionalWCF.ServiceImpl&quot;&lt;/span&gt;
&lt;span class=&quot;rem&quot;&gt;      Scope=&quot;Singleton&quot;&lt;/span&gt;
&lt;span class=&quot;rem&quot;&gt;      /&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kwrd&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;html&quot;&gt;StructureMap&lt;/span&gt;&lt;span class=&quot;kwrd&quot;&gt;&amp;gt;&lt;/span&gt;</pre>
<p>Now if the client is running on the same machine WCF is discarded.  If the service is moved to another machine with a simple configuration file tweak WCF is used.  The clients code is none the wiser.</p>
<p>This pattern can be extending to support duplex communication by using .Net events instead of exposing the callback contracts to the clients.  I plan on writing an additional blog to cover this topic.</p>
<p>The full source to this post can be downloaded here <a href="https://github.com/HeadspringLabs/OptionalWCF">OptionalWCF</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Windows Installers with the WiX Toolset Part 04]]></title>
    <link href="http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-04/"/>
    <updated>2012-12-28T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-04</id>
    <content type="html"><![CDATA[<address>This article is part of a series exploring how to create installers for Windows software.  Here&#8217;s the complete contents of the series.</address>
<address><a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-01/">Part 1 – What Kinds of Software Projects Benefit From an Installer?</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-02/">Part 2 – An Overview Of Windows Installer and its Features</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-03/">Part 3 – Tooling Options for Building Installers</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-04/">Part 4 – The Windows Installer Runtime Sequence</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-5/">Part 5 – The Contents of an MSI</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-6/">Part 6 – The Structure of a WiX File</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-7/">Part 7 – Generating an MSI Package From Your WiX</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-8/">Part 8 – Troubleshooting Installer Runtime Problems</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-summary/">Part 9 - Summary</a><br />
</address>
<p><br/></p>
<h2>The Windows Installer Runtime Sequence</h2>
<p>When a software installation actually takes place, there&#8217;s actually a certain sequence of events that Windows Installer follows.  It&#8217;s critical to understand this sequence for several reasons.  The entire sequence isn&#8217;t always guaranteed to run (the user might perform a silent install), and only certain parts of the sequence are transactional and you don&#8217;t want to affect the target machine outside that range of events.</p>
<p>The installation process is divided into two phases:  the UI or acquisition phase, and the execution phase.</p>
<p><a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-04/phasesofaninstall/" rel="attachment wp-att-6310"><img src="http://www.headspring.com/wp-content/uploads/2012/12/phasesOfAnInstall.png" alt="Diagram with UI or Acquisition phase followed by Execution phase with immediate mode and deferred mode. Rollback arrow across execution phase." title="Phases of a Windows Install" width="649" height="361" class="alignnone size-full wp-image-6310" /></a></p>
<h3>UI/Acquisition phase</h3>
<p>This is usually the first phase.  This is the phase where the user is presented with a series of screens guiding them through the install process, possibly asking for any needed information and perhaps providing a chance to customize the location on the filesystem to install the application.</p>
<p>However, if the user performs a silent install, this phase will be skipped!  Because of this you need to be sure that you have default values or actions for anything you prompt the user for.  You also need to be sure not to perform any setup actions in this phase because it might not run.</p>
<h3>Execution phase</h3>
<p>This is the second phase where Windows Installer actually performs the install.  Unlike the UI phase it will always run, and it does so in two modes that are rather confusingly named:  immediate and deferred.</p>
<p>In immediate mode, Windows Installer scans through the entire MSI and prepares a script of steps to execute to perform the installation.  It doesn&#8217;t actually make any changes at this point, it just compiles all the specified resources and actions into a transcript to be applied after the entire MSI is scanned and compiled into the transcript.</p>
<p>In deferred mode the compiled transcript of changes is actually applied to the target computer.</p>
<h3>Rollback</h3>
<p>If at any point during the execution phase an error occurs, Windows Installer will halt and perform a rollback of all operations previously applied.  This makes the execution phase transactional - either the entire set of operations is applied, or none of them.  As always there are some caveats and exceptions around this (e.g. running a custom action method that doesn&#8217;t have a compensating rollback method), but all basic file operations will be undone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Windows Installers with the WiX Toolset Part 03]]></title>
    <link href="http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-03/"/>
    <updated>2012-12-28T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-03</id>
    <content type="html"><![CDATA[<address>This article is part of a series exploring how to create installers for Windows software.  Here&#8217;s the complete contents of the series.</address>
<address><a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-01/">Part 1 – What Kinds of Software Projects Benefit From an Installer?</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-02/">Part 2 – An Overview Of Windows Installer and its Features</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-03/">Part 3 – Tooling Options for Building Installers</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-04/">Part 4 – The Windows Installer Runtime Sequence</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-5/">Part 5 – The Contents of an MSI</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-6/">Part 6 – The Structure of a WiX File</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-7/">Part 7 – Generating an MSI Package From Your WiX</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-8/">Part 8 – Troubleshooting Installer Runtime Problems</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-summary/">Part 9 - Summary</a><br />
</address>
<p><br/></p>
<h2>Free Options</h2>
<p>There are several free options for authoring Windows installers, including WiX.  One of these is Nullsoft Scriptable Install System (NSIS).  NSIS was created a number of years ago in order to distribute a media player called Winamp.  Some reasons to consider NSIS are that it&#8217;s relatively simple and straightforward to learn, and it supports a plugin system to extend it.  Some reasons to avoid NSIS are it&#8217;s relatively old (the last release was in 2009), and the size of the community using it has been dwindling as a result.  You can check out NSIS <a href="http://nsis.sourceforge.net/">here</a>.</p>
<p> Another free option with a lot of current traction is Inno Setup.  It&#8217;s been around nearly as long as NSIS and is being more actively updated.  It has a custom Pascal scripting engine to customize the install process, and appears to have a few features (such as Unicode support) that NSIS doesn&#8217;t.  You can find out more at the Inno Setup <a href="http://www.jrsoftware.org/isinfo.php">website</a>.</p>
<p> Both NSIS and Inno Setup have one major drawback compared to WiX - neither use the Windows Installer system in Windows discussed in a previous <a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-02/">part</a>.  Whether or not this matters depends on whether your application targets consumers or corporations.  Consumers are not going to care much HOW software installs on their machine as long as it works and doesn&#8217;t silently add malware.  Corporations on the other hand have concerns well beyond the average consumer.  This includes things like inspecting the contents of the installer for worrisome system configuration changes, customizing the installer with separate transforms to meet IT standards, and safely allowing nonadmin users to run an installer that needs some admin privileges.  There&#8217;s a great discussion about the advantages of Windows Installer at <a href="http://serverfault.com/questions/11670/advantages-of-using-msi-files/274609#274609">ServerFault</a> (msi files are Windows Installer packages).</p>
<p> So if WiX has all these great features compared to Inno Setup, what disadvantages does it have?  In my opinion the answer to this is easily the steep learning curve.  Because WiX is essentially a wrapper around the concepts in Windows Installer, you MUST understand Windows Installer to use it effectively.  This will be the topic of future discussions in this series.</p>
<h2>Commercial Options</h2>
<p>There are some commercial options that have more polish and user friendliness than WiX.  The two that appear to be most popular are <a href="http://www.advancedinstaller.com/">Advanced Installer</a> and <a href="http://www.installshield.com/">InstallShield</a>.  I have not used either because my installer needs are so irregular that I haven&#8217;t been able to justify the licensing cost for an occasional &#8220;one off&#8221; installer project, but if your job responsibilities include fulltime or near fulltime work with Windows installers you probably want to investigate them as an option.</p>
<h2>Summary</h2>
<p>There are a variety of tooling options for your installer needs.  If you have a sufficiently simple software product and aren&#8217;t targeting corporate installs, Inno Setup might be a good fit.  If you have more advanced needs that Inno Setup cannot handle, or your targeting corporations that have deployment requirements and standards, you&#8217;ll probably want to use WiX unless maintaining installers is your primary job responsibility or your company has sufficiently deep pockets for a good commercial tool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching and Learning From Developers Internationally]]></title>
    <link href="http://www.headspringlabs.com/blog/teaching-and-learning-from-developers-internationally/"/>
    <updated>2012-12-21T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/teaching-and-learning-from-developers-internationally</id>
    <content type="html"><![CDATA[<p>At Headspring, we’re proud to have amazing leaders who are experts in the industry. Jimmy Bogard, our Technical Architect, not only excels at Headspring but also enthusiastically participates in the global development community. He recently went on a “world tour” to teach and meet developers in Ireland, England and Ukraine.  Jimmy had the opportunity to speak to the following groups. For more information about what information was presented at each event, <a href="http://lostechies.com/jimmybogard/2012/12/17/dublin-alt-net-skills-matter-kiev-alt-net-slides-code/" target="_blank">click here</a>.</p>
<ul>
<li><a href="http://dublinalt.net/2012/11/20/november-meetup-jimmy-bogard-on-real-world-polyglot-persistence/" target="_blank">Dublin ALT.NET</a> in <strong>Dublin, Ireland</strong></li>
<li><a href="http://skillsmatter.com/course/design-architecture/udi-dahan-nservicebus-workshop" target="_blank">Enterprise Development with NServiceBus @ SkillsMatter</a> in <strong>London, England</strong></li>
<li><a href="http://blog.kievalt.net/post/36657818028/jimmy-in-the-town" target="_blank">Kiev ALT.NET</a> in <strong>Kiev, Ukraine</strong></li>
</ul>
<p>&nbsp;</p>
<p>While the way we program is universally similar, it’s interesting to think about how similar and different developers are around the world. Here’s what Jimmy had to say about his experience:</p>
<p><em>“One of the insights I found consistent in conversations from all the developers is that it seems that no matter where I go, the problems and passions remain the same. Everyone&#8217;s smart, everyone&#8217;s passionate, and the things developers’ care about are similar everywhere. We read the same blogs, books, and even use the same gadgets (when we can afford them). The only global issue was whether to code in English. People don&#8217;t pick English just because an American or Brit is on the team.  What if there are Ukrainians, French or Danes on the same team? The common language is English. We have a hard enough time picking a programming language, but picking a spoken language is even more interesting!”</em></p>
<p>&nbsp;</p>
<p>Want Headspring to speak at your event or come do an in-house training for your employees? <a href="http://www.headspring.com/developer-training/" target="_blank">Take a look at our website</a> for more information and contact us today!</p>
<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Windows Installers With the WiX Toolset, Part 02]]></title>
    <link href="http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-02/"/>
    <updated>2012-12-18T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-02</id>
    <content type="html"><![CDATA[<address>This article is part of a series exploring how to create installers for Windows software.  Here&#8217;s the complete contents of the series.</address>
<address><a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-01/">Part 1 – What Kinds of Software Projects Benefit From an Installer?</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-02/">Part 2 – An Overview Of Windows Installer and its Features</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-03/">Part 3 – Tooling Options for Building Installers</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-04/">Part 4 – The Windows Installer Runtime Sequence</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-5/">Part 5 – The Contents of an MSI</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-6/">Part 6 – The Structure of a WiX File</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-7/">Part 7 – Generating an MSI Package From Your WiX</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-8/">Part 8 – Troubleshooting Installer Runtime Problems</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-summary/">Part 9 - Summary</a><br />
</address>
<p><br/></p>
<h2>Windows Installer is Actually A Feature</h2>
<p>Something many Windows users are unaware of is that there is actually a feature in Windows called &#8220;Windows Installer&#8221;.  You won&#8217;t find it listed in Programs and Features in the Control Panel, but its included in the same way as a feature almost all Windows users have encountered (and cursed) called Windows Update.  You can see a release history and the default version shipped with the various Windows operating systems <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa371185.aspx">here.</a></p>
<h2>Basic Features</h2>
<p>Windows Installer has a number of features that make it attractive to use.  The foremost is transactional operations:  if an error occurs while installing (or uninstalling) your software, Windows Installer is able to rollback all of the changes made so far and revert the computer back to its state before the operation began.  This means the system will never be left in a half installed state.</p>
<p>Also highly useful is the capability to add Start menu, quick launch, and Desktop shortcuts for the users to easily start your software.</p>
<p>Another feature is the ability to do repairs.  Imagine a user is trying to free up disk space on their hard drive and unwittingly deletes some of your application files.  Windows Installer provides a mechanism that allows an installed program to be repaired, where any missing files are replaced.</p>
<p>Windows Installer also has a number of capabilities to control file sprawl and minimize disk usage.  With plummeting storage costs these capabilities aren&#8217;t as important as they once were, but if your application is very large then they&#8217;re still useful.  Windows Installer can track versions of your application and perform in place upgrades and patches so a user doesn&#8217;t have to completely install the entire application (which could take a long time if the application has a lot of physical files).  On demand install allows features of an application to appear available, but they aren&#8217;t actually installed on the machine until used, saving disk space.</p>
<h2>Custom Actions</h2>
<p>One very compelling ability is custom actions.  Custom actions can be written in C++, C#, and others and invoked in the middle of your install.  This allows you to add any sort of capability you need to have during the middle of the install process.  There are several caveats to go along with this power however.  First, make sure you&#8217;re not baking in some sort of setup that will need to be run outside the installer as a normal maintenance operation.  Second, sometimes what you&#8217;re trying to accomplish might not be worth the effort to make a custom action when it can be done in normal application code.  I&#8217;m not saying to never use custom actions, but just be careful not to turn them into a golden hammer to drive in everything, including screws.</p>
<h2>Other Advanced Features</h2>
<p>There are a plethora of other features aimed at big enterprises that are worth a passing mention.  Administrative install allows a network admin to  &#8221;install&#8221; onto on a network share location, and then users can install the application from that network share.  This allows the admin to ensure that users get the application installed in a consistent manner, reducing maintenance time.  Windows Installer can also be used to perform unattended installs so that an application can be pushed and installed in an automatic fashion, saving IT staff from having to make the rounds of hundreds or thousands of desks.</p>
<h2>In Summary</h2>
<p>You can see a fairly comprehensive list of the features <a title="http://msdn.microsoft.com/en-us/library/windows/desktop/aa367449(v=vs.85).aspx" href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa367449(v=vs.85).aspx">here</a>.  You&#8217;re probably not going to avail yourself to all of the more advanced functionality, but many of the simpler benefits (transactional operations, shortcuts, custom actions, and repairs) are a big win for a local Windows client application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Windows Installers With the WiX Toolset, Part 01]]></title>
    <link href="http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-01/"/>
    <updated>2012-12-14T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/creating-windows-installers-with-the-wix-toolset-part-01</id>
    <content type="html"><![CDATA[<address>This article is part of a series exploring how to create installers for Windows software.  Here&#8217;s the complete contents of the series.</address>
<address><a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-01/">Part 1 – What Kinds of Software Projects Benefit From an Installer?</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-02/">Part 2 – An Overview Of Windows Installer and its Features</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-03/">Part 3 – Tooling Options for Building Installers</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-04/">Part 4 – The Windows Installer Runtime Sequence</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-5/">Part 5 – The Contents of an MSI</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-6/">Part 6 – The Structure of a WiX File</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-7/">Part 7 – Generating an MSI Package From Your WiX</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-part-8/">Part 8 – Troubleshooting Installer Runtime Problems</a><br />
<a href="http://www.headspring.com/nolan/creating-windows-installers-with-the-wix-toolset-summary/">Part 9 - Summary</a><br />
</address>
<p><br/></p>
<h2>What Kinds of Software Projects Benefit From an Installer?</h2>
<p>So you&#8217;ve invested in creating a Windows application of some kind and you&#8217;re ready to distribute it so others can use it.  Maybe that means making it available for sale to millions of outside people, or perhaps it means handing it off to your IT administrator.  How are the finished bits going to get to a place they can be used?</p>
<p>If your software is a client application that will live locally on the user&#8217;s computer (think Microsoft Office or the latest version of Halo), you should very seriously consider creating an installer.  Back in the days of DOS and the Soviet Union the operating system was little more than a shell over a file system and the user had to explicitly go find and tell the computer to run your application.  Windows provides a start menu with a list of all the programs a user can run, and at a minimum you probably want to add entries so your users can easily find and run the software once it&#8217;s on their system.</p>
<p>On the other hand if your software is a web application then there probably isn&#8217;t going to be much benefit to creating an installer.  The installation is theoretically going to be done by a tech savvy individual that will be configuring the web server initially, and upgrades usually just mean copying newer files into the site directory.  The benefit of creating an installer for this process is rarely going to be exceed the cost.  This doesn&#8217;t mean you shouldn&#8217;t /automate/ the upgrade process.  Most Headspring projects are configured to be deployed automatically by a continuous integration server to eliminate rote error prone activity, and very large web applications (think Netflix) usually are deployed by automatically creating a virtual machine image using tooling such as Puppet, Chef, or VMWare with the application.</p>
<h2>Why Should I Bother?</h2>
<p>Why should you go through the effort of creating an installer for your Windows client application?  Lots of developer tools are distributed as a zip file that contains the software, and it&#8217;s up to the person downloading it to place it on their file system somewhere and find it whenever they want to run it - what&#8217;s wrong with that?</p>
<p>Installers make software accessible to casual users who might not know what to do with a zip archive.  Even if the target demographic is power users, it still makes their life easier to provide them with an installer that adds start menu entries for them.</p>
<p>Installers also allow you to ensure that certain tasks or setup activities take place by running custom actions as part of the install, minimizing the chance your application gets configured incorrectly before your client starts using it.</p>
<p>There are other less tangible but still very real benefits as well.  An installer projects a professional image of your application.  This is your users first impression of your application, and having an installer silently says &#8220;this is a polished project&#8221;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Mercurial basics with Logan Turner]]></title>
    <link href="http://www.headspringlabs.com/blog/learn-mercurial-basics-with-logan-turner/"/>
    <updated>2012-11-09T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/learn-mercurial-basics-with-logan-turner</id>
    <content type="html"><![CDATA[<p>In this cast, Logan Turner and Jeffrey Palermo discuss Mercurial basics.  Logan Turner is a Headspring intern and a student at LeTourneau University.  Logan has recently learned Mercurial, and he has helped another new employee come up to speed with this distributed version control system.</p>
<p>You might be interested in these Mercurial resources:</p>
<ul>
<li><a href="http://mercurial.selenic.com/">Mercurial/TortoiseHg</a></li>
<li><a href="http://hgbook.red-bean.com/read/">Free Mercurial ebook by Bryan O’Sullivan</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Headspring is Ready to Rock!]]></title>
    <link href="http://www.headspringlabs.com/blog/headspring-is-ready-to-rock/"/>
    <updated>2012-11-09T00:00:00-06:00</updated>
    <id>http://www.headspringlabs.com/blog/headspring-is-ready-to-rock</id>
    <content type="html"><![CDATA[<p>What event sells out as fast as a Justin Beiber concert? <a href="http://codemash.org/" target="_blank">CodeMash</a>! Last year’s CodeMash conference sold out in 22 minutes. Bieber actually sold his entire North American tour in that time, but why mince words?</p>
<p>We are excited to get together with developers from across the country for <a href="http://codemash.org/" target="_blank">CodeMash 2013</a> being held January 8 – 11, 2013 in Sandusky, Ohio. The conference is filled with information about updated practices, methodologies, and technology trends in a variety of platforms and development languages. There are terrific keynote speakers, workshops, time to geek out with fellow attendees and talk “code”, and possibly take a dip in Ohio’s largest indoor waterpark.</p>
<p>Our team members Jimmy Bogard and Sharon Cichelli will be leading sessions at CodeMash.  Sharon will present “Hello, Arduino: Write Code that Interacts with the Real World” and Jimmy will be involved in the PreCompiler workshop.</p>
<p style="text-align: center;"><a href="http://www.headspring.com/wp-content/uploads/2012/11/img_1647.jpg"><img class="aligncenter size-medium wp-image-5847" title="img_1647" src="http://www.headspring.com/wp-content/uploads/2012/11/img_1647-229x300.jpg" alt="" width="229" height="300" /></a></p>
<p>Jimmy is also on his own world tour. He is speaking at various international locations over the next three months beginning on December 4, 2012 in London, England where he’ll talk about “Real World Polyglot Persistence”.  Check out other scheduled events below:</p>
<ul>
<li><a href="http://warmcrocconf.net/" target="_blank">Warm Crocodile Developer Conference</a>, January 16-17, 2013 in Copenhagen, Denmark</li>
<li><a href="http://confoo.ca/en" target="_blank">ConFoo Conference</a>, February 25-March 1, 2013 in Montreal, Canada.</li>
</ul>
<p>&nbsp;</p>
<p>Attending any of these conferences? We look forward to meeting you!</p>
<p>Have an event where you’d like us to present? Let’s talk!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating a Windows Install to a New Macbook]]></title>
    <link href="http://www.headspringlabs.com/blog/migrating-a-windows-install-to-a-new-macbook/"/>
    <updated>2012-11-02T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/migrating-a-windows-install-to-a-new-macbook</id>
    <content type="html"><![CDATA[<p>Recently here at Headspring my workstation got upgraded from a PC laptop to a Macbook Pro. While I was excited about the new hardware and taking the plunge into Mac OS X (that’s the Roman numeral ten, not the 24th letter of the alphabet), I still needed to be able to run Windows and Visual Studio. This post summarizes the various options I explored, and my final setup.</p>
<h3>Multiboot or Virtual Machine?</h3>
<p>Multibooting is using a software tool that hooks your computer’s normal power on sequence and provides you a way to choose what operating system you want to load.</p>
<p>Microsoft has supported multibooting since Windows XP as way to install new versions of Windows while still keeping older versions for your legacy software that won’t work on the newer Windows version. It’s also been possible to multiboot Linux and Windows for a long time.</p>
<p>A virtual machine is software that pretends to be a computer, and runs another operating system inside of it. You can use a virtual machine to run an instance of Windows 98 while booted into Windows 7 for example.</p>
<p>The advantage to multibooting is performance - running an operating system inside a virtual machine causes it to run more slowly than it would if it was natively booted - but the disadvantage is you can only work within the one operating system you booted into.</p>
<p>Virtual machines can perform slower, but allow you to run both operating systems at the same time.</p>
<p>I’ve done multibooting with multiple versions of Windows and Linux in the past. It works well, but its amazing how much of a psychological barrier having to boot into an alternate OS to do something gets created. “I got an email response&#8230;I need to go update that spreadsheet&#8230;rats, it’s in the other OS&#8230;I really don’t want to close everything and reboot, I’ll do it later&#8230;”.</p>
<p>The new workstation is top of the line: Intel I7, 16GB memory, solid state hard disk. It would be more than capable of running Windows in a virtual machine without much overhead. Choosing a virtual machine over multibooting was a pretty easy choice.</p>
<p>There were several candidates for the virtual machine software - VMWare Fusion, Oracle VirtualBox, and Parallels Desktop. VirtualBox was ruled out pretty quickly as underperforming. Parallels and Fusion are fairly similar. We ended up going with Parallels.</p>
<h3>How I Migrated My Old Windows Install to Parallels</h3>
<p>I didn’t want to have to start over with a brand new install of Windows, my old setup was perfectly fine. Fortunately Parallels supports migrating Windows from your old PC to your new Mac. It took three tries before I figured out the best way to do it, so I wanted to share and hopefully save someone else the learning experience. It wasn’t painful, but did consume a fair amount of wasted setup time.</p>
<p>There are several options for doing the migration: using a special USB cable you can buy from Parallels, over the network, or copying to an external hard drive.</p>
<p>We didn’t buy the cable, so attempt number one was over the wireless network. Big mistake. It took over twenty hours to transfer, and the virtual machine wouldn’t boot afterwards. Somehow it got corrupted during the transfer.</p>
<p>Attempt number two was copying to external storage. This took about as long, and was going to take another twenty hours to pull off the drive to the Macbook.</p>
<p>Fortunately at this point a coworker intervened and told me using a network crossover would be much quicker.\</p>
<h3>What You’ll Need</h3>
<p>The new Macbooks don’t have a built in ethernet port, so you’ll need a Thunderbolt to NIC adapter for this. You’ll also need an ethernet crossover cable - this is a special cable that crosses the wires from plug to the other, allowing you to connect two computers directly as if they were both on a network. Because it’s a direct connection there’s virtually no transfer overhead at all.</p>
<h3>Performing the Transfer</h3>
<p>On your Windows machine you need to go download and install Parallels Transporter. Start Parallels Transporter. The screen looks like this:</p>
<p><img class="alignnone size-medium wp-image-5836" title="Parallels Transporter for Windows" src="http://www.headspring.com/wp-content/uploads/2012/11/parallelsTransporterWindows-300x177.png" alt="Screenshot of Parallels Transporter for Windows with three options: usb cable, network, external drive" width="300" height="177" /></p>
<p>&nbsp;</p>
<p>On the Mac download Parallels 8 and start it. Click File..Migrate. This will launch the migration wizard.</p>
<p><a href="http://www.headspring.com/wp-content/uploads/2012/11/001-wizard.png"><img class="alignnone size-medium wp-image-5834" title="Parallels migration on Mac" src="http://www.headspring.com/wp-content/uploads/2012/11/001-wizard-300x252.png" alt="Screenshot of Parallels migration on Macbook" width="300" height="252" /></a></p>
<p>If you haven’t already done so, connect the crossover between the two computers. Choose Network. Choose IP Address instead. Select your Windows computer from the list. Alternately you can use ipconfig on your Windows machine to get your IP address and specify it manually if needed.</p>
<p><strong> When asked how to configure the image, choose Like a PC.</strong> You can customize the settings later, but if you choose Like a Mac, Parallels will automatically copy your Documents folder into your Home directory in Mac OS, leaving you with two copies of everything.</p>
<p>That’s it! Using a crossover took about two hours - much faster than using the wireless network or copying it to external storage. When the transfer was complete, the virtual machine started without any issues (well, almost - I had to reactivate Windows) and I didn’t have to setup (and endlessly tweak) a new install.</p>
<h3>Wrapping Up</h3>
<p>I’m still getting used to my new Mac. There’s a lot that’s different from Windows and I’m now fighting twenty years of muscle memory (I started using Windows on version 3.11 in 1993). I plan on writing a follow up post on adjusting from Windows to Mac OS sometime in the future.</p>
<p>The transition pain is more than worth it - there are a lot of advantages to using a Mac with Windows. The hardware is rock solid, fast, and very light (it’s less than half the weight of my old workstation). The Retina display is gorgeous and highly readable. Also of note is the ability to now develop for multiple platforms - I can still use Visual Studio for .NET development, but also write apps for IOS and MacOS as well. Support for platforms like Ruby and node.js are also better on Mac than Windows.</p>
<p>Are you running Windows on a Mac? Are you using Parallels, or something else? Share your experiences or current setup in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 8 For Business: Breakfast with Jeffrey Palermo]]></title>
    <link href="http://www.headspringlabs.com/blog/windows-8-for-business-breakfast-with-jeffrey-palermo/"/>
    <updated>2012-10-28T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/windows-8-for-business-breakfast-with-jeffrey-palermo</id>
    <content type="html"><![CDATA[<p>Join Headspring President &amp; COO Jeffrey Palermo for a Windows 8 Small Business Workshop to learn how the new operating system can help your business succeed. Jeffrey will teach you how to navigate all the new features and demonstrate ways to make your business more productive.</p>
<p>Learn to:<br />
• Stay connected to your team and clients<br />
• Access documents from anywhere<br />
• Protect your business<br />
• Take control of your business</p>
<p>Event details:<br />
Tuesday, December 18, 2012<br />
8:00 a.m. – 9:30 a.m.<br />
(Breakfast, networking and workshop)</p>
<p>Location:<br />
Microsoft Store<br />
3309 Esperanza Crossing<br />
Ste. 104<br />
Austin, Texas 78758</p>
<p>Registration:<br />
Space is limited. To register, please <a href="https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032537757&amp;Culture=en-US&amp;community=1" target="_blank">RSVP</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid Mutation by Default]]></title>
    <link href="http://www.headspringlabs.com/blog/avoid-mutation-by-default/"/>
    <updated>2012-10-25T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/avoid-mutation-by-default</id>
    <content type="html"><![CDATA[<p>Several weeks back, I was <a href="http://www.headspring.com/patrick/low-ceremony-xunit/">customizing xUnit</a> to cut down on ceremony in my tests.  When I ran into some trouble, I started looking through the source code for xUnit, and saw something a little surprising: tests within a test class are executed in a random order.  Sure, tests need to be isolated so that test execution order doesn&#8217;t affect their success or failure, but randomizing within the test runner seemed like overkill.</p>
<p>If it ever caught an issue, it still wouldn&#8217;t tell me where the problem was, right?  It seemed like it would be better to execute in a deterministic order so that when I <em>do</em> get myself into trouble, it will be reproducible trouble.  Today, though, I was grateful for this behavior.  If you&#8217;re running tests frequently during development, the very fact that your newly-coded tests start failing at random <strong>is</strong> informative: <em>&#8220;What test is wrong?  The one that I just wrote.&#8221;</em></p>
<h2>A Trivial Yet Broken Class</h2>
<p>I was working on a routine whose job was to produce a date range after taking into account several business rules.  If none of the rules applied, we wanted to return the range [DateTime.MinValue, DateTime.MaxValue] to indicate &#8220;all the dates we could ever possibly care about&#8221;.  Each business rule could possibly shorten this range, affecting the start, the end, or both.  The overall result was, basically, the range where several other ranges overlapped.  I started by creating a helper class, DateRange, as a glorified pair of DateTimes:</p>
<p><div><script src='https://gist.github.com/3949963.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
<p>To make it clear to the reader that we were starting with &#8220;all the dates we could ever possibly care about&#8221; and subsequently narrowing that down to the overlapping range, I added a static field:</p>
<p><div><script src='https://gist.github.com/3949966.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
<p>This field allowed the main algorithm to look something like this:</p>
<p><div><script src='https://gist.github.com/3950102.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
<p>Do you see the bug?  <strong>The terrible, horrible, no good, very bad bug?</strong>  xUnit did.</p>
<p>The 3 rules I was applying were involved yet test-friendly, so it was easy to implement several tests to make sure my bases were covered.  All was well, until I got to the seventh test.  It failed with an impossible result.  The dates in the resulting range didn&#8217;t even show up anywhere in my test setup.  Mystified, I ran that test in the debugger.  It passed!  I ran the whole test class a few times, and this one test would pass or fail at random.  This was extremely odd, as the code under test seemed to be clearly deterministic.</p>
<h2>Excessive Mutation</h2>
<p>Realizing that xUnit was running my tests in a different order each time helped me to see my mistake.  This implementation of DateRange is mutable, and AllOfTime is static and therefore shared.  AllOfTime is a shared mutable thing whose name suggests an immutable thing.  AllOfTime is lying.</p>
<p>I had broken my own rule: I make classes immutable by default, making them mutable as soon as being dogmatic starts to hurt.  Instead, I had made this mutable from the start and immediately tripped on my own intellectual shoelaces.  Marking the properties as read-only forced me to rephrase the main logic, but that actually resulted in simplifying everything and ensured that AllOfTime is in fact <em>all</em> of it:</p>
<p><div><script src='https://gist.github.com/3949968.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
<p>DateRange deserves to be a value just like DateTimes deserve to be values.  You can&#8217;t <em>change</em> 10/24/2012 any more than you can change the number 5. 5 will always be 5, 10/24/2012 will always be 10/24/2012, and the range [10/24/2012, 10/31/2012] will always be the range [10/24/2012, 10/31/2012].</p>
<p>As a general rule, I avoid mutation.  If I did that everywhere, though, my code would likely become too hard to follow.  As soon as keeping things immutable becomes a larger pain than the pain it solves, I back off and allow mutable state to come into the picture.  Even then, I try to limit the &#8220;footprint&#8221; of that state change.</p>
<p>Unnecessary mutation makes it too easy to make trivial mistakes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we decided on our current vacation policy]]></title>
    <link href="http://www.headspringlabs.com/blog/how-we-decided-on-our-current-vacation-policy/"/>
    <updated>2012-10-24T00:00:00-05:00</updated>
    <id>http://www.headspringlabs.com/blog/how-we-decided-on-our-current-vacation-policy</id>
    <content type="html"><![CDATA[<p><img style="margin: 0px 5px 5px 0px; display: inline; float: left" align="left" src="http://www.inc.com/uploaded_files/image/170x170/work-vacation-policy-bkt_3122.jpg"></p>
<p>I very much liked the <a href="https://github.com/blog/1269-the-github-hiring-experience">GitHub write-up</a> on how they hire.&nbsp; It made me think back to a lot of decisions we’ve made at <a href="http://www.headspring.com/">Headspring</a>.&nbsp; One of them is the decision on vacation policy.&nbsp; With a mostly salaried work force, benefits is a big concern, and vacation is one of those.&nbsp; Here, I’ll attempt to share the progression of our vacation policy and how it came about.</p>
<p>First, in 2007/2008 H1, Headspring had just added its 6th employee.&nbsp; The vacation policy was simple but not consistent.&nbsp; On paper, we said “two weeks” for everyone.&nbsp; In practice, we worked too much and didn’t even track days off.&nbsp; Then, by the end of 2008, we grew to over twelve employees and had to modify the policy.&nbsp; If memory serves me, it was in 2009 when we had real conversations and came up with a policy.</p>
<h2>The first real policy</h2>
<p>The idea that arose from having an employee retrospective was that we hired mature professionals, and we didn’t need to have a time-bound, cookie-cutter policy for everyone.&nbsp; The policy that we created them was a “<strong>use as much as you need</strong>” vacation policy.&nbsp; Everyone loved that policy.&nbsp; It communicated to all employees several things.</p>
<ul>
<li>You are a professional
<li>We trust you.</li>
</ul>
<p>We didn’t track days off at all.&nbsp; Over the course of the next two years, we found that this policy left a lot of questions on the table.</p>
<ul>
<li>Ok.&nbsp; I can take as much vacation as I want?&nbsp; Clearly that can’t be the case?
<li>How much vacation is too much?
<li>How much vacation is too little?</li>
</ul>
<p>With highly analytical employees who hold themselves to a high standard, the policy of “whatever” proved to be too ambiguous.&nbsp; Folks did take vacation, but there was always an uneasiness of being unsure of expectations in this area.&nbsp; After another company meeting on the topic – probably around the time of twenty (20) employees, we honed the policy yet again.</p>
<h2>Changing the policy</h2>
<p>First, we re-established a commitment to a 40-hour work week.&nbsp; While some companies boast “we work hard, and we play hard”, we established a “work hard and go home” standard.&nbsp; Sorry.&nbsp; We don’t have a ping-pong table in the office (although our office complex does have horseshoes, sand volleyball, a basketball court, and a Frisbee golf setup).&nbsp; After communicating this, we made the policy for non-billable staff two or three weeks (in addition to the 7 company holidays we have) based on level in the company.&nbsp; The policy for our software engineers (most of the company) became based on billed time.&nbsp; With a standard of a 40-hour work week, we established a percent of the year that we needed to work on client projects in order for the company to remain financially healthy.&nbsp; After all, we make our money by building great custom software for our clients so they can compete in their industries.&nbsp; </p>
<p>The solution, then was to based vacation time on the percent of 2080 hours (a year of 40-hour weeks) that we expected to be billed.&nbsp;&nbsp; In effect, by billing continuously for a couple of months, a week of vacation would then pull the percent of time billed down to where we needed it (80%).&nbsp; This system actually worked very well.&nbsp; Everyone knew exactly how much vacation they could take and still meet their commitment for billed time.&nbsp; I must insert here that we don’t have bonuses for top billers.&nbsp; We are a software engineering firm and not a straight consulting company.&nbsp; Therefore, our goal is not to maximize individual billed time to a client.&nbsp; Our goal is to deliver one awesome software system after another.&nbsp; Often we finish milestones early and leave budget on the table.&nbsp; This is celebrated, not lamented.</p>
<p>With this policy in place, everyone knew what to do, and by tracking our client time, we knew exactly how much time off we could afford per person.&nbsp;&nbsp; One gentleman saved up for himself four weeks of vacation time.</p>
<h2>How the policy broke, and what we did about it</h2>
<p><a href="http://www.headspring.com/wp-content/uploads/2012/10/CropperCapture63.png"><img style="background-image: none; border-right-width: 0px; margin: 0px 0px 5px 5px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="CropperCapture[63]" border="0" alt="CropperCapture[63]" align="right" src="http://www.headspring.com/wp-content/uploads/2012/10/CropperCapture63_thumb.png" width="244" height="140"></a>This policy carried us to early 2012.&nbsp; Now, at 30 employees, we have a different policy.&nbsp; The currently policy is much simpler and requires much less math.&nbsp; It is much more in alignment with our philosophy of “light on policy, heavy on judgment.”&nbsp;&nbsp; We have now changed the policy for our software engineers to&nbsp; be the following: 80% client work, 10% non-client company time, and 10% personal time.&nbsp; That means that 10% of the year, it’s yours.&nbsp; With a 52-week year, it is 5.2 weeks.&nbsp; We have found that most people don’t take 5.2 weeks of vacation per year, so that is enough for sick days, other stuff, and small bits of time off spread throughout the year as well.&nbsp; Then, the 10% of company time covers our staff meetings, fun quarterly off-sites, and other stuff.&nbsp; We put that policy in place because we found that a few people we uneasy about taking vacation because they were afraid of bench time.&nbsp; Our policy had not taken that into account.&nbsp; We wanted everyone to take vacation, and now the current policy ensures that.</p>
<h2>What will it be next?</h2>
<p>I have no idea.&nbsp; We’ve tweaked it over the years, and if we find another downside to the current policy, we’ll tweak it again.&nbsp; The good news is that we have such great people who live the company values, that they tend to speak up if something isn’t right.&nbsp; One of our company values is honest communication (candor), and they do a great job of living this one out.&nbsp; </p>
]]></content>
  </entry>
  
</feed>
